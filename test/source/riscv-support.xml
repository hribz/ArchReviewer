<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="riscv-support.c"><expr_stmt><expr><name>From</name> <name>f45a2a59119c9a2dda0ab7f58d61f5ea64589411</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Xianting</name> <name>Tian</name> <operator>&lt;</operator><name><name>xianting</name><operator>.</operator><name>tian</name></name>@<name><name>linux</name><operator>.</operator><name>alibaba</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">20</literal> <name>Oct</name> <literal type="number">2022</literal> <literal type="number">09</literal><operator>:</operator><literal type="number">50</literal><operator>:</operator><literal type="number">06</literal> <operator>+</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name> <literal type="number">1</literal><operator>/</operator><literal type="number">9</literal></expr>]</index> <name>Add</name> <name>RISCV64</name> <name>framework</name> <name>code</name> <name>support</name>

<name>This</name> <name>patch</name> <name>mainly</name> <name>added</name> <name>some</name> <name>environment</name> <name>configurations</name></expr><operator>,</operator> <expr><name>macro</name> <name>definitions</name></expr><operator>,</operator>
<expr><name>specific</name> <name>architecture</name> <name>structures</name> <name>and</name> <name>some</name> <name>function</name> <name>declarations</name> <name>supported</name>
<name>by</name> <name>the</name> <name>RISCV64</name> <name><name>architecture</name><operator>.</operator>

<name>We</name></name> <name>can</name> <name>use</name> <name>the</name> <name>build</name> <name>command</name> <name>to</name> <name>get</name> <name>the</name> <name>simplest</name> <name>version</name> <name>crash</name> <name>tool</name><operator>:</operator>
	<name>make</name> <name>target</name><operator>=</operator><name>RISCV64</name> <operator>-</operator><name>j2</name>

<name>Co</name><operator>-</operator><name>developed</name><operator>-</operator><name>by</name><operator>:</operator> <name>Lifang</name> <name>Xia</name> <operator>&lt;</operator><name>lifang_xia</name>@<name><name>linux</name><operator>.</operator><name>alibaba</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<name>Signed</name><operator>-</operator><name>off</name><operator>-</operator><name>by</name><operator>:</operator> <name>Xianting</name> <name>Tian</name> <operator>&lt;</operator><name><name>xianting</name><operator>.</operator><name>tian</name></name>@<name><name>linux</name><operator>.</operator><name>alibaba</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<operator>--</operator><operator>-</operator>
 <name>Makefile</name>            <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <name>README</name>              <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <name><name>configure</name><operator>.</operator><name>c</name></name>         <operator>|</operator>  <literal type="number">43</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <name><name>defs</name><operator>.</operator><name>h</name></name>              <operator>|</operator> <literal type="number">154</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <name><name>diskdump</name><operator>.</operator><name>c</name></name>          <operator>|</operator>  <literal type="number">11</literal> <operator>++</operator><operator>+</operator><operator>-</operator>
 <name><name>help</name><operator>.</operator><name>c</name></name>              <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <name><name>lkcd_vmdump_v1</name><operator>.</operator><name>h</name></name>    <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>--</operator>
 <name><name>lkcd_vmdump_v2_v3</name><operator>.</operator><name>h</name></name> <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>--</operator>
 <name><name>netdump</name><operator>.</operator><name>c</name></name>           <operator>|</operator>   <literal type="number">9</literal> <operator>++</operator><operator>-</operator>
 <name><name>ramdump</name><operator>.</operator><name>c</name></name>           <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator>
 <name><name>riscv64</name><operator>.</operator><name>c</name></name>           <operator>|</operator>  <literal type="number">54</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <name><name>symbols</name><operator>.</operator><name>c</name></name>           <operator>|</operator>  <literal type="number">10</literal> <operator>++</operator><operator>+</operator>
 <literal type="number">12</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">294</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">24</literal> <macro><name>deletions</name><argument_list>(<argument>-</argument>)</argument_list></macro>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name><name>riscv64</name><operator>.</operator><name>c</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>Makefile</name> <name>b</name><operator>/</operator><name>Makefile</name>
<name>index</name> <literal type="number">79aef17</literal><operator>..</operator><literal type="number">1506dd4</literal> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name>Makefile</name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name>Makefile</name>
@@ <operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>CFILES</name><operator>=</operator>main<operator>.</operator><name>c</name> <name><name>tools</name><operator>.</operator><name>c</name></name> <name><name>global_data</name><operator>.</operator><name>c</name></name> <name><name>memory</name><operator>.</operator><name>c</name></name> <name><name>filesys</name><operator>.</operator><name>c</name></name> <name><name>help</name><operator>.</operator><name>c</name></name> <name><name>task</name><operator>.</operator><name>c</name></name> \
 	<name><name>kernel</name><operator>.</operator><name>c</name></name> <name><name>test</name><operator>.</operator><name>c</name></name> <name><name>gdb_interface</name><operator>.</operator><name>c</name></name> <name><name>configure</name><operator>.</operator><name>c</name></name> <name><name>net</name><operator>.</operator><name>c</name></name> <name><name>dev</name><operator>.</operator><name>c</name></name> <name><name>bpf</name><operator>.</operator><name>c</name></name> \
 	<name><name>printk</name><operator>.</operator><name>c</name></name> \
 	<name><name>alpha</name><operator>.</operator><name>c</name></name> <name><name>x86</name><operator>.</operator><name>c</name></name> <name><name>ppc</name><operator>.</operator><name>c</name></name> <name><name>ia64</name><operator>.</operator><name>c</name></name> <name><name>s390</name><operator>.</operator><name>c</name></name> <name><name>s390x</name><operator>.</operator><name>c</name></name> <name><name>s390dbf</name><operator>.</operator><name>c</name></name> <name><name>ppc64</name><operator>.</operator><name>c</name></name> <name><name>x86_64</name><operator>.</operator><name>c</name></name> \
<operator>-</operator>	<name><name>arm</name><operator>.</operator><name>c</name></name> <name><name>arm64</name><operator>.</operator><name>c</name></name> <name><name>mips</name><operator>.</operator><name>c</name></name> <name><name>mips64</name><operator>.</operator><name>c</name></name> <name><name>sparc64</name><operator>.</operator><name>c</name></name> \
<operator>+</operator>	<name><name>arm</name><operator>.</operator><name>c</name></name> <name><name>arm64</name><operator>.</operator><name>c</name></name> <name><name>mips</name><operator>.</operator><name>c</name></name> <name><name>mips64</name><operator>.</operator><name>c</name></name> <name><name>riscv64</name><operator>.</operator><name>c</name></name> <name><name>sparc64</name><operator>.</operator><name>c</name></name> \
 	<name><name>extensions</name><operator>.</operator><name>c</name></name> <name><name>remote</name><operator>.</operator><name>c</name></name> <name><name>va_server</name><operator>.</operator><name>c</name></name> <name><name>va_server_v1</name><operator>.</operator><name>c</name></name> <name><name>symbols</name><operator>.</operator><name>c</name></name> <name><name>cmdline</name><operator>.</operator><name>c</name></name> \
 	<name><name>lkcd_common</name><operator>.</operator><name>c</name></name> <name><name>lkcd_v1</name><operator>.</operator><name>c</name></name> <name><name>lkcd_v2_v3</name><operator>.</operator><name>c</name></name> <name><name>lkcd_v5</name><operator>.</operator><name>c</name></name> <name><name>lkcd_v7</name><operator>.</operator><name>c</name></name> <name><name>lkcd_v8</name><operator>.</operator><name>c</name></name>\
 	<name><name>lkcd_fix_mem</name><operator>.</operator><name>c</name></name> <name><name>s390_dump</name><operator>.</operator><name>c</name></name> <name><name>lkcd_x86_trace</name><operator>.</operator><name>c</name></name> \
@@ <operator>-</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>OBJECT_FILES</name><operator>=</operator>main<operator>.</operator><name>o</name> <name><name>tools</name><operator>.</operator><name>o</name></name> <name><name>global_data</name><operator>.</operator><name>o</name></name> <name><name>memory</name><operator>.</operator><name>o</name></name> <name><name>filesys</name><operator>.</operator><name>o</name></name> <name><name>help</name><operator>.</operator><name>o</name></name> <name><name>task</name><operator>.</operator><name>o</name></name> \
 	<name><name>build_data</name><operator>.</operator><name>o</name></name> <name><name>kernel</name><operator>.</operator><name>o</name></name> <name><name>test</name><operator>.</operator><name>o</name></name> <name><name>gdb_interface</name><operator>.</operator><name>o</name></name> <name><name>net</name><operator>.</operator><name>o</name></name> <name><name>dev</name><operator>.</operator><name>o</name></name> <name><name>bpf</name><operator>.</operator><name>o</name></name> \
 	<name><name>printk</name><operator>.</operator><name>o</name></name> \
 	<name><name>alpha</name><operator>.</operator><name>o</name></name> <name><name>x86</name><operator>.</operator><name>o</name></name> <name><name>ppc</name><operator>.</operator><name>o</name></name> <name><name>ia64</name><operator>.</operator><name>o</name></name> <name><name>s390</name><operator>.</operator><name>o</name></name> <name><name>s390x</name><operator>.</operator><name>o</name></name> <name><name>s390dbf</name><operator>.</operator><name>o</name></name> <name><name>ppc64</name><operator>.</operator><name>o</name></name> <name><name>x86_64</name><operator>.</operator><name>o</name></name> \
<operator>-</operator>	<name><name>arm</name><operator>.</operator><name>o</name></name> <name><name>arm64</name><operator>.</operator><name>o</name></name> <name><name>mips</name><operator>.</operator><name>o</name></name> <name><name>mips64</name><operator>.</operator><name>o</name></name> <name><name>sparc64</name><operator>.</operator><name>o</name></name> \
<operator>+</operator>	<name><name>arm</name><operator>.</operator><name>o</name></name> <name><name>arm64</name><operator>.</operator><name>o</name></name> <name><name>mips</name><operator>.</operator><name>o</name></name> <name><name>mips64</name><operator>.</operator><name>o</name></name> <name><name>riscv64</name><operator>.</operator><name>o</name></name> <name><name>sparc64</name><operator>.</operator><name>o</name></name> \
 	<name><name>extensions</name><operator>.</operator><name>o</name></name> <name><name>remote</name><operator>.</operator><name>o</name></name> <name><name>va_server</name><operator>.</operator><name>o</name></name> <name><name>va_server_v1</name><operator>.</operator><name>o</name></name> <name><name>symbols</name><operator>.</operator><name>o</name></name> <name><name>cmdline</name><operator>.</operator><name>o</name></name> \
 	<name><name>lkcd_common</name><operator>.</operator><name>o</name></name> <name><name>lkcd_v1</name><operator>.</operator><name>o</name></name> <name><name>lkcd_v2_v3</name><operator>.</operator><name>o</name></name> <name><name>lkcd_v5</name><operator>.</operator><name>o</name></name> <name><name>lkcd_v7</name><operator>.</operator><name>o</name></name> <name><name>lkcd_v8</name><operator>.</operator><name>o</name></name> \
 	<name><name>lkcd_fix_mem</name><operator>.</operator><name>o</name></name> <name><name>s390_dump</name><operator>.</operator><name>o</name></name> <name><name>netdump</name><operator>.</operator><name>o</name></name> <name><name>diskdump</name><operator>.</operator><name>o</name></name> <name><name>makedumpfile</name><operator>.</operator><name>o</name></name> <name><name>xendump</name><operator>.</operator><name>o</name></name> \
@@ <operator>-</operator><literal type="number">438</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">438</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name><name>mips</name><operator>.</operator><name>o</name></name><operator>:</operator> <name>$</name><block>{<expr><name>GENERIC_HFILES</name></expr>}</block> <name>$</name><block>{<expr><name>REDHAT_HFILES</name></expr>}</block> <name><name>mips</name><operator>.</operator><name>c</name></name>
 <name><name>mips64</name><operator>.</operator><name>o</name></name><operator>:</operator> <name>$</name><block>{<expr><name>GENERIC_HFILES</name></expr>}</block> <name>$</name><block>{<expr><name>REDHAT_HFILES</name></expr>}</block> <name><name>mips64</name><operator>.</operator><name>c</name></name>
 	<name>$</name><block>{<expr><name>CC</name></expr>}</block> <operator>-</operator><name>c</name> <name>$</name><block>{<expr><name>CRASH_CFLAGS</name></expr>}</block> <name><name>mips64</name><operator>.</operator><name>c</name></name> <name>$</name><block>{<expr><name>WARNING_OPTIONS</name></expr>}</block> <name>$</name><block>{<expr><name>WARNING_ERROR</name></expr>}</block>
 
<operator>+</operator><name><name>riscv64</name><operator>.</operator><name>o</name></name><operator>:</operator> <name>$</name><block>{<expr><name>GENERIC_HFILES</name></expr>}</block> <name>$</name><block>{<expr><name>REDHAT_HFILES</name></expr>}</block> <name><name>riscv64</name><operator>.</operator><name>c</name></name>
<operator>+</operator>	<name>$</name><block>{<expr><name>CC</name></expr>}</block> <operator>-</operator><name>c</name> <name>$</name><block>{<expr><name>CRASH_CFLAGS</name></expr>}</block> <name><name>riscv64</name><operator>.</operator><name>c</name></name> <name>$</name><block>{<expr><name>WARNING_OPTIONS</name></expr>}</block> <name>$</name><block>{<expr><name>WARNING_ERROR</name></expr>}</block>
<operator>+</operator>
 <name><name>sparc64</name><operator>.</operator><name>o</name></name><operator>:</operator> <name>$</name><block>{<expr><name>GENERIC_HFILES</name></expr>}</block> <name>$</name><block>{<expr><name>REDHAT_HFILES</name></expr>}</block> <name><name>sparc64</name><operator>.</operator><name>c</name></name>
 	<name>$</name><block>{<expr><name>CC</name></expr>}</block> <operator>-</operator><name>c</name> <name>$</name><block>{<expr><name>CRASH_CFLAGS</name></expr>}</block> <name><name>sparc64</name><operator>.</operator><name>c</name></name> <name>$</name><block>{<expr><name>WARNING_OPTIONS</name></expr>}</block> <name>$</name><block>{<expr><name>WARNING_ERROR</name></expr>}</block>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>README</name> <name>b</name><operator>/</operator><name>README</name>
<name>index</name> <literal type="number">1f98fbf</literal><operator>..</operator><literal type="number">9850a29</literal> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name>README</name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name>README</name>
@@ <operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@
   <name>These</name> <name>are</name> <name>the</name> <name>current</name> <name>prerequisites</name><operator>:</operator> 
 
   <name>o</name>  <name>At</name> <name>this</name> <name>point</name></expr><operator>,</operator> <expr><name>x86</name></expr><operator>,</operator> <expr><name>ia64</name></expr><operator>,</operator> <expr><name>x86_64</name></expr><operator>,</operator> <expr><name>ppc64</name></expr><operator>,</operator> <expr><name>ppc</name></expr><operator>,</operator> <expr><name>arm</name></expr><operator>,</operator> <expr><name>arm64</name></expr><operator>,</operator> <expr><name>alpha</name></expr><operator>,</operator> <expr><name>mips</name></expr><operator>,</operator>
<expr><operator>-</operator>     <name>mips64</name></expr><operator>,</operator> <expr><name>s390</name> <name>and</name> <name>s390x</name><operator>-</operator><name>based</name> <name>kernels</name> <name>are</name> <name><name>supported</name><operator>.</operator>  <name>Other</name></name> <name>architectures</name>
<operator>-</operator>     <name>may</name> <name>be</name> <name>addressed</name> <name>in</name> <name>the</name> <name><name>future</name><operator>.</operator>
<name/></name>+     <name>mips64</name></expr><operator>,</operator> <expr><name>riscv64</name></expr><operator>,</operator> <expr><name>s390</name> <name>and</name> <name>s390x</name><operator>-</operator><name>based</name> <name>kernels</name> <name>are</name> <name><name>supported</name><operator>.</operator>  <name>Other</name></name>
<operator>+</operator>     <name>architectures</name> <name>may</name> <name>be</name> <name>addressed</name> <name>in</name> <name>the</name> <name><name>future</name><operator>.</operator>
 
   <name>o</name></name>  <name>One</name> <name>size</name> <name>fits</name> <name>all</name> <operator>--</operator> <name>the</name> <name>utility</name> <name>can</name> <name>be</name> <name>run</name> <name>on</name> <name>any</name> <name>Linux</name> <name>kernel</name> <name>version</name>
      <name>version</name> <name>dating</name> <name>back</name> <name>to</name> <literal type="number">2.2.5</literal><operator>-</operator><literal type="number">15.</literal>  <name>A</name> <name>primary</name> <name>design</name> <name>goal</name> <name>is</name> <name>to</name> <name>always</name>
@@ <operator>-</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@
      <name>arm64</name> <name>dumpfiles</name> <name>may</name> <name>be</name> <name>built</name> <name>by</name> <name>typing</name> <literal type="string">"make target=ARM64"</literal><operator>.</operator>
   <name>o</name>  <name>On</name> <name>an</name> <name>x86_64</name> <name>host</name></expr><operator>,</operator> <expr><name>an</name> <name>x86_64</name> <name>binary</name> <name>that</name> <name>can</name> <name>be</name> <name>used</name> <name>to</name> <name>analyze</name>
      <name>ppc64le</name> <name>dumpfiles</name> <name>may</name> <name>be</name> <name>built</name> <name>by</name> <name>typing</name> <literal type="string">"make target=PPC64"</literal><operator>.</operator>
<operator>+</operator>  <name>o</name>  <name>On</name> <name>an</name> <name>x86_64</name> <name>host</name></expr><operator>,</operator> <expr><name>an</name> <name>x86_64</name> <name>binary</name> <name>that</name> <name>can</name> <name>be</name> <name>used</name> <name>to</name> <name>analyze</name>
<operator>+</operator>     <name>riscv64</name> <name>dumpfiles</name> <name>may</name> <name>be</name> <name>built</name> <name>by</name> <name>typing</name> <literal type="string">"make target=RISCV64"</literal><operator>.</operator>
 
   <name>Traditionally</name> <name>when</name> <name>vmcores</name> <name>are</name> <name>compressed</name> <name>via</name> <name>the</name> <macro><name>makedumpfile</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <name>facility</name>
   <name>the</name> <name>libz</name> <name>compression</name> <name>library</name> <name>is</name> <name>used</name></expr><operator>,</operator> <expr><name>and</name> <name>by</name> default <name>the</name> <name>crash</name> <name>utility</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>configure</name><operator>.</operator><name>c</name></name> <name>b</name><operator>/</operator><name><name>configure</name><operator>.</operator><name>c</name></name>
<name>index</name> <literal type="number">5188851..08b52be</literal> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>configure</name><operator>.</operator><name>c</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>configure</name><operator>.</operator><name>c</name></name>
@@ <operator>-</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>void</name> <call><name>add_extra_lib</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIPS</name></cpp:undef>
 <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SPARC64</name></cpp:undef>
 <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIPS64</name></cpp:undef>
<expr_stmt><expr><operator>+</operator><operator>#</operator><name>undef</name> <name>RISCV64</name>
 
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X86</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>
@@ <operator>-</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>void</name> <call><name>add_extra_lib</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIPS</name></cpp:macro>    <cpp:value>11</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPARC64</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIPS64</name></cpp:macro>  <cpp:value>13</cpp:value></cpp:define>
<expr_stmt><expr><operator>+</operator><operator>#</operator><name>define</name> <name>RISCV64</name> <literal type="number">14</literal>
 
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_X86</name></cpp:macro>    <cpp:value>"TARGET=X86"</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_ALPHA</name></cpp:macro>  <cpp:value>"TARGET=ALPHA"</cpp:value></cpp:define>
@@ <operator>-</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">138</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>void</name> <call><name>add_extra_lib</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_MIPS</name></cpp:macro>   <cpp:value>"TARGET=MIPS"</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_MIPS64</name></cpp:macro> <cpp:value>"TARGET=MIPS64"</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_SPARC64</name></cpp:macro> <cpp:value>"TARGET=SPARC64"</cpp:value></cpp:define>
<expr_stmt><expr><operator>+</operator><operator>#</operator><name>define</name> <name>TARGET_RISCV64</name> <literal type="string">"TARGET=RISCV64"</literal>
 
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_CFLAGS_X86</name></cpp:macro>    <cpp:value>"TARGET_CFLAGS=-D_FILE_OFFSET_BITS=64"</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_CFLAGS_ALPHA</name></cpp:macro>  <cpp:value>"TARGET_CFLAGS="</cpp:value></cpp:define>
@@ <operator>-</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">161</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>void</name> <call><name>add_extra_lib</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_CFLAGS_MIPS_ON_X86_64</name></cpp:macro>  <cpp:value>"TARGET_CFLAGS=-m32 -D_FILE_OFFSET_BITS=64"</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_CFLAGS_MIPS64</name></cpp:macro>          <cpp:value>"TARGET_CFLAGS="</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_CFLAGS_SPARC64</name></cpp:macro>         <cpp:value>"TARGET_CFLAGS="</cpp:value></cpp:define>
<expr_stmt><expr><operator>+</operator><operator>#</operator><name>define</name> <name>TARGET_CFLAGS_RISCV64</name>         <literal type="string">"TARGET_CFLAGS="</literal>
<operator>+</operator><operator>#</operator><name>define</name> <name>TARGET_CFLAGS_RISCV64_ON_X86_64</name>	<literal type="string">"TARGET_CFLAGS="</literal>
 
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GDB_TARGET_DEFAULT</name></cpp:macro>        <cpp:value>"GDB_CONF_FLAGS="</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GDB_TARGET_ARM_ON_X86</name></cpp:macro>     <cpp:value>"GDB_CONF_FLAGS=--target=arm-elf-linux"</cpp:value></cpp:define>
@@ <operator>-</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">173</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>void</name> <call><name>add_extra_lib</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GDB_TARGET_PPC64_ON_X86_64</name></cpp:macro>  <cpp:value>"GDB_CONF_FLAGS=--target=powerpc64le-unknown-linux-gnu"</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GDB_TARGET_MIPS_ON_X86</name></cpp:macro>     <cpp:value>"GDB_CONF_FLAGS=--target=mipsel-elf-linux"</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GDB_TARGET_MIPS_ON_X86_64</name></cpp:macro>  <cpp:value>"GDB_CONF_FLAGS=--target=mipsel-elf-linux CFLAGS=-m32 CXXFLAGS=-m32"</cpp:value></cpp:define>
<expr_stmt><expr><operator>+</operator><operator>#</operator><name>define</name> <name>GDB_TARGET_RISCV64_ON_X86_64</name>  <literal type="string">"GDB_CONF_FLAGS=--target=riscv64-unknown-linux-gnu"</literal>
      
 <comment type="block">/*
  *  The original plan was to allow the use of a particular version
@@ -404,6 +410,9 @@ get_current_configuration(struct supported_gdb_version *sp)
 #ifdef __sparc_v9__
 	target_data.target = SPARC64;
 #endif
+#if defined(__riscv) &amp;&amp; (__riscv_xlen == 64)
+	target_data.target = RISCV64;
+#endif
 
 	set_initial_target(sp);
 
@@ -457,6 +466,12 @@ get_current_configuration(struct supported_gdb_version *sp)
 			if ((target_data.initial_gdb_target != UNKNOWN) &amp;&amp;
 			    (target_data.host != target_data.initial_gdb_target))
 				arch_mismatch(sp);
+		} else if ((target_data.target == X86_64) &amp;&amp;
+			(name_to_target((char *)target_data.target_as_param) == RISCV64)) {
+			/*
+			 *  Build an RISCV64 crash binary on an X86_64 host.
+			 */</comment>
<operator>+</operator>			<name><name>target_data</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>RISCV64</name></expr>;</expr_stmt>
 		} else <block>{<block_content>
 			<macro><name>fprintf</name><argument_list>(<argument>stderr</argument>,
 			    <argument><literal type="string">"\ntarget=%s is not supported on the %s host architecture\n\n"</literal></argument>,
<argument>@@ -<literal type="number">497</literal></argument>,<argument><literal type="number">6</literal> +<literal type="number">512</literal></argument>,<argument><literal type="number">14</literal> @@ get_current_configuration(struct supported_gdb_version *sp)
 		    (target_data.target != MIPS64)</argument>)</argument_list></macro>
 			<expr_stmt><expr><call><name>arch_mismatch</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>target_data</name><operator>.</operator><name>initial_gdb_target</name></name> <operator>==</operator> <name>RISCV64</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>+</operator>		    <operator>(</operator><name><name>target_data</name><operator>.</operator><name>target</name></name> <operator>!=</operator> <name>RISCV64</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<if_stmt><if>if <condition>(<expr><name><name>target_data</name><operator>.</operator><name>target</name></name> <operator>==</operator> <name>X86_64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>				<name><name>target_data</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>RISCV64</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>				<call><name>arch_mismatch</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>
 		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>target_data</name><operator>.</operator><name>initial_gdb_target</name></name> <operator>==</operator> <name>X86</name><operator>)</operator> <operator>&amp;&amp;</operator>
 		    <operator>(</operator><name><name>target_data</name><operator>.</operator><name>target</name></name> <operator>!=</operator> <name>X86</name><operator>)</operator></expr>)</condition> <block>{<block_content>
 			<if_stmt><if>if <condition>(<expr><name><name>target_data</name><operator>.</operator><name>target</name></name> <operator>==</operator> <name>X86_64</name></expr>)</condition><block type="pseudo"><block_content> 
@@ <expr_stmt><expr><operator>-</operator><literal type="number">660</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">683</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <macro><name>show_configuration</name><argument_list>(<argument>void</argument>)</argument_list></macro></expr></expr_stmt></block_content></block></if></if_stmt>
 	<case>case <expr><name>SPARC64</name></expr>:</case>
 		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"TARGET: SPARC64\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 		<break>break;</break>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<case>case <expr><name>RISCV64</name></expr>:</case>
<expr_stmt><expr><operator>+</operator>		<call><name>printf</name><argument_list>(<argument><expr><literal type="string">"TARGET: RISCV64\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<break>break;</break>
 	</block_content>}</block></if></if_stmt>
 
 	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>target_data</name><operator>.</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
@@ <expr_stmt><expr><operator>-</operator><literal type="number">777</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">803</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <macro><name>build_configure</name><argument_list>(<argument>struct supported_gdb_version *sp</argument>)</argument_list></macro>
 		<name>target</name> <operator>=</operator> <name>TARGET_SPARC64</name></expr>;</expr_stmt>
 		<expr_stmt><expr><name>target_CFLAGS</name> <operator>=</operator> <name>TARGET_CFLAGS_SPARC64</name></expr>;</expr_stmt>
 		<break>break;</break>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<case>case <expr><name>RISCV64</name></expr>:</case>
<expr_stmt><expr><operator>+</operator>		<name>target</name> <operator>=</operator> <name>TARGET_RISCV64</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><name><name>target_data</name><operator>.</operator><name>host</name></name> <operator>==</operator> <name>X86_64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<name>target_CFLAGS</name> <operator>=</operator> <name>TARGET_CFLAGS_RISCV64_ON_X86_64</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>			<name>gdb_conf_flags</name> <operator>=</operator> <name>GDB_TARGET_RISCV64_ON_X86_64</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<name>target_CFLAGS</name> <operator>=</operator> <name>TARGET_CFLAGS_RISCV64</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<break>break;</break>
 	</block_content>}</block></if></if_stmt>
 
 	<expr_stmt><expr><name>ldflags</name> <operator>=</operator> <call><name>get_extra_flags</name><argument_list>(<argument><expr><literal type="string">"LDFLAGS.extra"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@@ <expr_stmt><expr><operator>-</operator><literal type="number">1374</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1408</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <macro><name>make_spec_file</name><argument_list>(<argument>struct supported_gdb_version *sp</argument>)</argument_list></macro>
 	<call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Vendor: Red Hat, Inc.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Packager: Dave Anderson &lt;anderson@redhat.com&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ExclusiveOS: Linux\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>-</operator>	<call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ExclusiveArch: %%{ix86} alpha ia64 ppc ppc64 ppc64pseries ppc64iseries x86_64 s390 s390x arm aarch64 ppc64le mips mipsel mips64el sparc64\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ExclusiveArch: %%{ix86} alpha ia64 ppc ppc64 ppc64pseries ppc64iseries x86_64 s390 s390x arm aarch64 ppc64le mips mipsel mips64el sparc64 riscv64\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Buildroot: %%{_tmppath}/%%{name}-root\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"BuildRequires: ncurses-devel zlib-devel bison\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Requires: binutils\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@@ <expr_stmt><expr><operator>-</operator><literal type="number">1613</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1647</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <macro><name>set_initial_target</name><argument_list>(<argument>struct supported_gdb_version *sp</argument>)</argument_list></macro>
 		<name><name>target_data</name><operator>.</operator><name>initial_gdb_target</name></name> <operator>=</operator> <name>MIPS</name></expr>;</expr_stmt>
 	<if_stmt><if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"SPARC64"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"SPARC64"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
 		<expr_stmt><expr><name><name>target_data</name><operator>.</operator><name>initial_gdb_target</name></name> <operator>=</operator> <name>SPARC64</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"RISCV64"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"RISCV64"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<name><name>target_data</name><operator>.</operator><name>initial_gdb_target</name></name> <operator>=</operator> <name>RISCV64</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
 </block_content>}</block>
 
 <expr_stmt><expr><name>char</name> <operator>*</operator>
@@ <operator>-</operator><literal type="number">1633</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1669</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <macro><name>target_to_name</name><argument_list>(<argument>int target</argument>)</argument_list></macro></expr></expr_stmt>
 	<case>case <expr><name>MIPS</name></expr>:</case>   <return>return<expr><operator>(</operator><literal type="string">"MIPS"</literal><operator>)</operator></expr>;</return>
 	<case>case <expr><name>MIPS64</name></expr>:</case> <return>return<expr><operator>(</operator><literal type="string">"MIPS64"</literal><operator>)</operator></expr>;</return>
 	<case>case <expr><name>SPARC64</name></expr>:</case> <return>return<expr><operator>(</operator><literal type="string">"SPARC64"</literal><operator>)</operator></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<case>case <expr><name>RISCV64</name></expr>:</case> <return>return<expr><operator>(</operator><literal type="string">"RISCV64"</literal><operator>)</operator></expr>;</return>
 	}
 
 	return <expr_stmt><expr><literal type="string">"UNKNOWN"</literal></expr>;</expr_stmt>
@@ <expr_stmt><expr><operator>-</operator><literal type="number">1697</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1734</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <macro><name>name_to_target</name><argument_list>(<argument>char *name</argument>)</argument_list></macro></expr></expr_stmt>
 		<return>return <expr><name>MIPS64</name></expr>;</return>
 	<if_stmt><if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sparc64"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"sparc64"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
 		<return>return <expr><name>SPARC64</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"RISCV64"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"RISCV64"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<return>return <expr><name>RISCV64</name></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"riscv64"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"riscv64"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<return>return <expr><name>RISCV64</name></expr>;</return>
 
 	<return>return <expr><name>UNKNOWN</name></expr>;</return>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>defs</name><operator>.</operator><name>h</name></name> <name>b</name><operator>/</operator><name><name>defs</name><operator>.</operator><name>h</name></name>
<name>index</name> <name>afdcf6c</name><operator>..</operator><name>d715378</name> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>defs</name><operator>.</operator><name>h</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>defs</name><operator>.</operator><name>h</name></name>
@@ <operator>-</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
 <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>X86</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>X86_64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALPHA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PPC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
     <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IA64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PPC64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S390</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S390X</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
     <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARM64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MIPS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MIPS64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
<operator>-</operator>    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator>    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RISCV64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SPARC64</name></expr></argument>)</argument_list></call>
 <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__alpha__</name></cpp:ifdef>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA</name></cpp:macro></cpp:define>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
@@ <operator>-</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@
 <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__sparc_v9__</name></cpp:ifdef>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPARC64</name></cpp:macro></cpp:define>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>+</operator><operator>#</operator></expr></expr_stmt><if_stmt><if>if defined<condition>(<expr><name>__riscv</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>&amp;&amp;</operator> <operator>(</operator><name>__riscv_xlen</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator>
<operator>+</operator><operator>#</operator><name>define</name> <name>RISCV64</name>
<operator>+</operator><operator>#</operator><name>endif</name>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 
 <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X86</name></cpp:ifdef>
@@ <operator>-</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">162</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@
 <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SPARC64</name></cpp:ifdef>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NR_CPUS</name></cpp:macro>  <cpp:value>(4096)</cpp:value></cpp:define>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>+</operator><operator>#</operator><name>ifdef</name> <name>RISCV64</name>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>NR_CPUS</name>  <argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>endif</name>
 
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NR_DEVICE_DUMPS</name></cpp:macro> <cpp:value>(64)</cpp:value></cpp:define>
 
@@ <operator>-</operator><literal type="number">3484</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">3490</literal></expr><operator>,</operator><expr><literal type="number">63</literal> @@ struct <name>arm64_stackframe</name> <block>{
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MAX_PHYSMEM_BITS</name></cpp:macro>       <cpp:value>48</cpp:value></cpp:define>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* MIPS64 */</comment>
 
<expr><operator>+</operator><operator>#</operator><name>ifdef</name> <name>RISCV64</name>
<operator>+</operator><operator>#</operator><name>define</name> <name>_64BIT_</name>
<operator>+</operator><operator>#</operator><name>define</name> <name>MACHINE_TYPE</name>		<literal type="string">"RISCV64"</literal>
<operator>+</operator>
<operator>+</operator><comment type="block">/*
+ * Direct memory mapping
+ */</comment>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>PTOV</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call> 									\
<operator>+</operator>	<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>X</name><operator>)</operator><operator>+</operator><operator>(</operator><name><name>machdep</name><operator>-&gt;</operator><name>kvbase</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>phys_base</name></name><operator>)</operator>
<operator>+</operator><operator>#</operator><name>define</name> <macro><name>VTOP</name><argument_list>(<argument>X</argument>)</argument_list></macro> <operator>(</operator><block>{									\
<expr><operator>+</operator>	<name>ulong</name> <name>_X</name> <operator>=</operator> <name>X</name></expr>;									\
<ternary><condition><expr><operator>+</operator>	<operator>(</operator><name>THIS_KERNEL_VERSION</name> <operator>&gt;=</operator> <call><name>LINUX</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>					\
<operator>+</operator>		<operator>(</operator><name>_X</name><operator>)</operator> <operator>&gt;=</operator> <name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>kernel_link_addr</name></name><operator>)</operator></expr> ?</condition><then>				\
<expr><operator>+</operator>		<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>_X</name><operator>)</operator><operator>-</operator><operator>(</operator><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>kernel_link_addr</name></name><operator>)</operator><operator>)</operator> <operator>+</operator>		\
<operator>+</operator>		 <name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>phys_base</name></name><operator>)</operator></expr></then><else>:						\
<expr><operator>+</operator>		<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>_X</name><operator>)</operator><operator>-</operator><operator>(</operator><name><name>machdep</name><operator>-&gt;</operator><name>kvbase</name></name><operator>)</operator><operator>)</operator> <operator>+</operator>				\
<operator>+</operator>		 <name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>phys_base</name></name><operator>)</operator></expr></else></ternary></block>;</expr>						\
<operator>+</operator>	}</block></expr></expr_stmt></block_content></block></if></if_stmt>)
<expr_stmt><expr><operator>+</operator><operator>#</operator><name>define</name> <call><call><name>PAGEBASE</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call>		<argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ulong</name><operator>)</operator><operator>(</operator><name>X</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>ulong</name><operator>)</operator><name><name>machdep</name><operator>-&gt;</operator><name>pagemask</name></name></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><comment type="block">/*
+ * Stack size order
+ */</comment>
<operator>+</operator><operator>#</operator><name>define</name> <name>THREAD_SIZE_ORDER</name>	<literal type="number">2</literal>
<operator>+</operator>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>PAGE_OFFSET</name>		<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>page_offset</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VMALLOC_START</name>		<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>vmalloc_start_addr</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VMALLOC_END</name>		<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>vmalloc_end</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VMEMMAP_VADDR</name>		<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>vmemmap_vaddr</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VMEMMAP_END</name>		<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>vmemmap_end</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>MODULES_VADDR</name>		<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>modules_vaddr</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>MODULES_END</name>		<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>modules_end</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <macro><name>IS_VMALLOC_ADDR</name><argument_list>(<argument>X</argument>)</argument_list></macro>	<call><name>riscv64_IS_VMALLOC_ADDR</name><argument_list>(<argument><expr><operator>(</operator><name>ulong</name><operator>)</operator><operator>(</operator><name>X</name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><comment type="block">/* from arch/riscv/include/asm/pgtable.h */</comment>
<operator>+</operator><operator>#</operator><name>define</name> <name>__SWP_TYPE_SHIFT</name>	<literal type="number">6</literal>
<operator>+</operator><operator>#</operator><name>define</name> <name>__SWP_TYPE_BITS</name> 	<literal type="number">5</literal>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>__SWP_TYPE_MASK</name> 	<argument_list>(<argument><expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>__SWP_TYPE_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>__SWP_OFFSET_SHIFT</name>	<argument_list>(<argument><expr><name>__SWP_TYPE_BITS</name> <operator>+</operator> <name>__SWP_TYPE_SHIFT</name></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><operator>#</operator><name>define</name> <macro><name>MAX_SWAPFILES_CHECK</name><argument_list>()</argument_list></macro>	<call><name>BUILD_BUG_ON</name><argument_list>(<argument><expr><name>MAX_SWAPFILES_SHIFT</name> <operator>&gt;</operator> <name>__SWP_TYPE_BITS</name></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>SWP_TYPE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> 	<argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>entry</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>__SWP_TYPE_SHIFT</name><operator>)</operator> <operator>&amp;</operator> <name>__SWP_TYPE_MASK</name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>SWP_OFFSET</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call>	<argument_list>(<argument><expr><operator>(</operator><name>entry</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>__SWP_OFFSET_SHIFT</name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <macro><name>__swp_type</name><argument_list>(<argument>entry</argument>)</argument_list></macro>	<call><name>SWP_TYPE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <macro><name>__swp_offset</name><argument_list>(<argument>entry</argument>)</argument_list></macro>	<call><name>SWP_OFFSET</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>TIF_SIGPENDING</name>		<argument_list>(<argument><expr><ternary><condition><expr><name>THIS_KERNEL_VERSION</name> <operator>&gt;=</operator> <call><name>LINUX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><comment type="block">/* from arch/riscv/include/asm/sparsemem.h */</comment>
<operator>+</operator><operator>#</operator><name>define</name> <name>_SECTION_SIZE_BITS</name>	<literal type="number">27</literal>
<operator>+</operator><operator>#</operator><name>define</name> <name>_MAX_PHYSMEM_BITS</name>	<literal type="number">56</literal> <comment type="block">/* 56-bit physical address supported */</comment>
<operator>+</operator><operator>#</operator><name>define</name> <name>PHYS_MASK_SHIFT</name> 	<name>_MAX_PHYSMEM_BITS</name>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>PHYS_MASK</name>		<argument_list>(<argument><expr><operator>(</operator><operator>(</operator><literal type="number">1UL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>PHYS_MASK_SHIFT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><operator>#</operator><name>endif</name>  <comment type="block">/* RISCV64 */</comment>
<operator>+</operator>
 <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X86</name></cpp:ifdef>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_32BIT_</name></cpp:macro></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MACHINE_TYPE</name></cpp:macro>       <cpp:value>"X86"</cpp:value></cpp:define>
@@ <operator>-</operator><literal type="number">4532</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">4595</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ struct <name>machine_specific</name> <block>{
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HEXADDR_STRLEN</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UVADDR_PRLEN</name></cpp:macro>      <cpp:value>(16)</cpp:value></cpp:define>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>+</operator><operator>#</operator><name>ifdef</name> <name>RISCV64</name>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>MAX_HEXADDR_STRLEN</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>UVADDR_PRLEN</name>       <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>endif</name>
 
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BADADDR</name></cpp:macro>  <cpp:value>((ulong)(-1))</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BADVAL</name></cpp:macro>   <cpp:value>((ulong)(-1))</cpp:value></cpp:define>
@@ <operator>-</operator><literal type="number">5127</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">5194</literal></expr>,<expr><literal type="number">9</literal> @@ <name>void</name> <call><name>dump_build_data</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;
 <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MIPS64</name></cpp:ifdef>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>machdep_init</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mips64_init(X)</cpp:value></cpp:define>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>+</operator><operator>#</operator><name>ifdef</name> <name>RISCV64</name>
<operator>+</operator><operator>#</operator><name>define</name> <macro><name>machdep_init</name><argument_list>(<argument>X</argument>)</argument_list></macro> <call><name>riscv64_init</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>endif</name>
 <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SPARC64</name></cpp:ifdef>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>machdep_init</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sparc64_init(X)</cpp:value></cpp:define>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
@@ <operator>-</operator><literal type="number">5607</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">5677</literal></expr>,<expr><literal type="number">9</literal> @@ <name>void</name> <call><name>display_help_screen</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
 <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SPARC64</name></cpp:ifdef>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump_machdep_table</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sparc64_dump_machdep_table(X)</cpp:value></cpp:define>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>+</operator><operator>#</operator><name>ifdef</name> <name>RISCV64</name>
<operator>+</operator><operator>#</operator><name>define</name> <macro><name>dump_machdep_table</name><argument_list>(<argument>X</argument>)</argument_list></macro> <call><name>riscv64_dump_machdep_table</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>endif</name>
 <specifier>extern</specifier> <name>char</name> <operator>*</operator><name><name>help_pointer</name><index>[]</index></name></expr>;
 <expr><specifier>extern</specifier> <name>char</name> <operator>*</operator><name><name>help_alias</name><index>[]</index></name></expr>;
 <expr><specifier>extern</specifier> <name>char</name> <operator>*</operator><name><name>help_ascii</name><index>[]</index></name></expr>;
@@ <expr><operator>-</operator><literal type="number">6684</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6757</literal></expr>,<expr><literal type="number">85</literal> @@ struct <name>machine_specific</name> <block>{
 
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MIPS64 */</comment>
 
<expr><operator>+</operator><comment type="block">/*
+ * riscv64.c
+ */</comment>
<operator>+</operator><name>void</name> <call><name>riscv64_display_regs_from_elf_notes</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator>
<operator>+</operator><operator>#</operator><name>ifdef</name> <name>RISCV64</name>
<operator>+</operator><name>void</name> <call><name>riscv64_init</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator><name>void</name> <call><name>riscv64_dump_machdep_table</name><argument_list>(<argument><expr><name>ulong</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator><name>int</name> <call><name>riscv64_IS_VMALLOC_ADDR</name><argument_list>(<argument><expr><name>ulong</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>display_idt_table</name><argument_list>()</argument_list></call> \
<operator>+</operator>	<call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"-d option is not applicable to RISCV64 architecture\n"</literal></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><comment type="block">/* from arch/riscv/include/asm/ptrace.h */</comment>
<operator>+</operator>struct <name>riscv64_register</name> <block>{
<expr><operator>+</operator>	<name>ulong</name> <name><name>regs</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></expr>;
<expr><operator>+</operator></expr>}</block></expr>;
<expr><operator>+</operator>
<operator>+</operator>struct <name>riscv64_pt_regs</name> <block>{
<expr><operator>+</operator>	<name>ulong</name> <name>badvaddr</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>cause</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>epc</name></expr>;
<expr><operator>+</operator></expr>}</block></expr>;
<expr><operator>+</operator>
<operator>+</operator>struct <name>riscv64_unwind_frame</name> <block>{
<expr><operator>+</operator>	<name>ulong</name> <name>fp</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>sp</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pc</name></expr>;
<expr><operator>+</operator></expr>}</block></expr>;
<expr><operator>+</operator>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>KSYMS_START</name>	<argument_list>(<argument><expr><literal type="number">0x1</literal></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator>struct <name>machine_specific</name> <block>{
<expr><operator>+</operator>	<name>ulong</name> <name>phys_base</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>page_offset</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>vmalloc_start_addr</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>vmalloc_end</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>vmemmap_vaddr</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>vmemmap_end</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>modules_vaddr</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>modules_end</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>kernel_link_addr</name></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<name>ulong</name> <name>_page_present</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>_page_read</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>_page_write</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>_page_exec</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>_page_user</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>_page_global</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>_page_accessed</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>_page_dirty</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>_page_soft</name></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<name>ulong</name> <name>_pfn_shift</name></expr>;
<expr><operator>+</operator>
<operator>+</operator>	struct <name>riscv64_register</name> <operator>*</operator><name>crash_task_regs</name></expr>;
<expr><operator>+</operator></expr>}</block></expr>;
<expr><operator>+</operator><comment type="block">/* from arch/riscv/include/asm/pgtable-bits.h */</comment>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_PRESENT</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_present</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_READ</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_read</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_WRITE</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_write</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_EXEC</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_exec</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_USER</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_user</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_GLOBAL</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_global</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_ACCESSED</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_accessed</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_DIRTY</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_dirty</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_SOFT</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_soft</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_SEC</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_sec</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_SHARE</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_share</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_BUF</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_buf</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_CACHE</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_cache</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>_PAGE_SO</name>	<argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>_page_so</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <name>_PAGE_SPECIAL</name>	<name>_PAGE_SOFT</name>
<operator>+</operator><operator>#</operator><name>define</name> <name>_PAGE_TABLE</name>	<name>_PAGE_PRESENT</name>
<operator>+</operator><operator>#</operator><name>define</name> <name>_PAGE_PROT_NONE</name> <name>_PAGE_READ</name>
<operator>+</operator><operator>#</operator><name>define</name> <name>_PAGE_PFN_SHIFT</name> <literal type="number">10</literal>
<operator>+</operator>
<operator>+</operator><operator>#</operator><name>endif</name> <comment type="block">/* RISCV64 */</comment>
<operator>+</operator>
 <comment type="block">/*
  * sparc64.c
  */</comment>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>diskdump</name><operator>.</operator><name>c</name></name> <name>b</name><operator>/</operator><name><name>diskdump</name><operator>.</operator><name>c</name></name>
<name>index</name> <literal type="number">2c1f9be</literal><operator>..</operator><literal type="number">28503bc</literal> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>diskdump</name><operator>.</operator><name>c</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>diskdump</name><operator>.</operator><name>c</name></name>
@@ <operator>-</operator><literal type="number">622</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">622</literal></expr>,<expr><literal type="number">9</literal> @@ <name>restart</name><operator>:</operator></expr>
 	<if_stmt><if type="elseif">else if <condition>(<expr><call><name>STRNEQ</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>utsname</name><operator>.</operator><name>machine</name></name></expr></argument>, <argument><expr><literal type="string">"aarch64"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
 	    <call><name>machine_type_mismatch</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"ARM64"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
 		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<operator>+</operator></block></expr>	<if_stmt><if type="elseif">else if <condition>(<expr><call><name>STRNEQ</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>utsname</name><operator>.</operator><name>machine</name></name></expr></argument>, <argument><expr><literal type="string">"riscv64"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>+</operator>	    <call><name>machine_type_mismatch</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"RISCV64"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>err</name>;</goto></block></expr></expr_stmt>
 
 	<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>block_size</name></name> <operator>!=</operator> <name>block_size</name></expr>)</condition> <block>{<block_content>
 		<expr_stmt><expr><name>block_size</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
@@ <expr_stmt><expr><operator>-</operator><literal type="number">780</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">783</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>restart</name><operator>:</operator>
 		<name><name>dd</name><operator>-&gt;</operator><name>machine_type</name></name> <operator>=</operator> <name>EM_AARCH64</name></expr>;</expr_stmt>
 	<if_stmt><if type="elseif">else if <condition>(<expr><call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"SPARC64"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
 		<expr_stmt><expr><name><name>dd</name><operator>-&gt;</operator><name>machine_type</name></name> <operator>=</operator> <name>EM_SPARCV9</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if type="elseif">else if <condition>(<expr><call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"RISCV64"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<name><name>dd</name><operator>-&gt;</operator><name>machine_type</name></name> <operator>=</operator> <name>EM_RISCV</name></expr>;</expr_stmt></block_content></block></if>
 	<else>else <block>{<block_content>
 		<macro><name>error</name><argument_list>(<argument>INFO</argument>, <argument><literal type="string">"%s: unsupported machine type: %s\n"</literal></argument>, 
 			<argument>DISKDUMP_VALID() ? <literal type="string">"diskdump"</literal> : <literal type="string">"compressed kdump"</literal></argument>,
<argument>@@ -<literal type="number">1751</literal></argument>,<argument><literal type="number">7</literal> +<literal type="number">1756</literal></argument>,<argument><literal type="number">8</literal> @@ dump_note_offsets(FILE *fp)
 			qemu = FALSE;
 			if (machine_type(<literal type="string">"X86_64"</literal>) || machine_type(<literal type="string">"S390X"</literal>) ||
 			    machine_type(<literal type="string">"ARM64"</literal>) || machine_type(<literal type="string">"PPC64"</literal>) ||
-			    machine_type(<literal type="string">"SPARC64"</literal>) || machine_type(<literal type="string">"MIPS64"</literal>)) {
+			    machine_type(<literal type="string">"SPARC64"</literal>) || machine_type(<literal type="string">"MIPS64"</literal>) ||
+			    machine_type(<literal type="string">"RISCV64"</literal>)</argument>)</argument_list></macro> <block>{<block_content>
 				<expr_stmt><expr><name>note64</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dd</name><operator>-&gt;</operator><name>notes_buf</name></name> <operator>+</operator> <name>tot</name></expr>;</expr_stmt>
 				<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Elf64_Nhdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
 				<if_stmt><if>if <condition>(<expr><call><name>STRNEQ</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>note64</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"QEMU"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
@@ <expr_stmt><expr><operator>-</operator><literal type="number">2558</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">2564</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <macro><name>dump_registers_for_compressed_kdump</name><argument_list>(<argument>void</argument>)</argument_list></macro></expr></expr_stmt></block_content></block></if></if_stmt>
 	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>KDUMP_CMPRS_VALID</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>dd</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>header_version</name></name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator>
 	    <operator>!</operator><operator>(</operator><call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"X86"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"X86_64"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
 	      <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"ARM64"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"PPC64"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>-</operator>	      <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"MIPS"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"MIPS64"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>	      <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"MIPS"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"MIPS64"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>+</operator>	      <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"RISCV64"</literal></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>)</block_content></block>)</block_content>
 		error(FATAL</block><operator>,</operator> <expr_stmt><expr><literal type="string">"-r option not supported for this dumpfile\n"</literal></expr></expr_stmt></else></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
 
 	<if_stmt><if>if <condition>(<expr><call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"ARM64"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name> <operator>!=</operator> <name><name>dd</name><operator>-&gt;</operator><name>num_prstatus_notes</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>help</name><operator>.</operator><name>c</name></name> <name>b</name><operator>/</operator><name><name>help</name><operator>.</operator><name>c</name></name>
<name>index</name> <literal type="number">99214c1</literal><operator>..</operator><name>a7258d4</name> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>help</name><operator>.</operator><name>c</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>help</name><operator>.</operator><name>c</name></name>
@@ <operator>-</operator><literal type="number">9512</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">9512</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>char</name> <operator>*</operator><name><name>README</name><index>[]</index></name> <operator>=</operator> <block>{
 <expr><literal type="string">"  These are the current prerequisites: "</literal></expr>,
 <expr><literal type="string">""</literal></expr>,
 <expr><literal type="string">"  o  At this point, x86, ia64, x86_64, ppc64, ppc, arm, arm64, alpha, mips,"</literal></expr>,
<expr><operator>-</operator><literal type="string">"     mips64, s390 and s390x-based kernels are supported.  Other architectures"</literal></expr>,
<expr><operator>-</operator><literal type="string">"     may be addressed in the future."</literal></expr>,
<expr><operator>+</operator><literal type="string">"     mips64, riscv64, s390 and s390x-based kernels are supported.  Other"</literal></expr>,
<expr><operator>+</operator><literal type="string">"     architectures may be addressed in the future."</literal></expr>,
 <expr><literal type="string">""</literal></expr>,
 <expr><literal type="string">"  o  One size fits all -- the utility can be run on any Linux kernel version"</literal></expr>,
 <expr><literal type="string">"     version dating back to 2.2.5-15.  A primary design goal is to always"</literal></expr>,
@@ <expr><operator>-</operator><literal type="number">9572</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9572</literal></expr>,<expr><literal type="number">8</literal> @@ <name>README_ENTER_DIRECTORY</name></expr>,
 <expr><literal type="string">"     arm64 dumpfiles may be built by typing \"make target=ARM64\"."</literal></expr>,
 <expr><literal type="string">"  o  On an x86_64 host, an x86_64 binary that can be used to analyze"</literal></expr>,
 <expr><literal type="string">"     ppc64le dumpfiles may be built by typing \"make target=PPC64\"."</literal></expr>,
<expr><operator>+</operator><literal type="string">"  o  On an x86_64 host, an x86_64 binary that can be used to analyze"</literal></expr>,
<expr><operator>+</operator><literal type="string">"     riscv64 dumpfiles may be built by typing \"make target=RISCV64\"."</literal></expr>,
 <expr><literal type="string">""</literal></expr>,
 <expr><literal type="string">"  Traditionally when vmcores are compressed via the makedumpfile(8) facility"</literal></expr>,
 <expr><literal type="string">"  the libz compression library is used, and by default the crash utility"</literal></expr>,
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>lkcd_vmdump_v1</name><operator>.</operator><name>h</name></name> <name>b</name><operator>/</operator><name><name>lkcd_vmdump_v1</name><operator>.</operator><name>h</name></name>
<name>index</name> <literal type="number">4933427..98ee094</literal> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>lkcd_vmdump_v1</name><operator>.</operator><name>h</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>lkcd_vmdump_v1</name><operator>.</operator><name>h</name></name>
@@ <operator>-</operator><literal type="number">114</literal></expr>,<expr><literal type="number">14</literal> <operator>+</operator><literal type="number">114</literal></expr>,<expr><literal type="number">8</literal> @@</expr> <typedef>typedef <type><struct>struct <name>_dump_header_s</name> <block>{
 	<decl_stmt><decl><type><name><name>struct</name> <name>new_utsname</name></name></type>   <name>dh_utsname</name></decl>;</decl_stmt>
 
 	<comment type="block">/* the dump registers */</comment>
<expr_stmt><expr><operator>-</operator><operator>#</operator><name>ifndef</name> <name>IA64</name>
<operator>-</operator><operator>#</operator><name>ifndef</name> <name>S390</name>
<operator>-</operator><operator>#</operator><name>ifndef</name> <name>S390X</name>
<operator>-</operator><operator>#</operator><name>ifndef</name> <name>ARM64</name>
<operator>+</operator><operator>#</operator></expr></expr_stmt><if_stmt><if>if !defined<condition>(<expr><name>IA64</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S390</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S390X</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARM64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><macro><name>defined</name><argument_list>(<argument>RISCV64</argument>)</argument_list></macro>
 	struct <name>pt_regs</name>       <name>dh_regs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>-</operator><operator>#</operator><name>endif</name>
<operator>-</operator><operator>#</operator><name>endif</name>
<operator>-</operator><operator>#</operator><name>endif</name>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 
 	<comment type="block">/* the address of the current task */</comment>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>lkcd_vmdump_v2_v3</name><operator>.</operator><name>h</name></name> <name>b</name><operator>/</operator><name><name>lkcd_vmdump_v2_v3</name><operator>.</operator><name>h</name></name>
<name>index</name> <literal type="number">984c2c2</literal><operator>..</operator><name>ef3067f</name> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>lkcd_vmdump_v2_v3</name><operator>.</operator><name>h</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>lkcd_vmdump_v2_v3</name><operator>.</operator><name>h</name></name>
@@ <operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
 
 <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PPC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>S390</name></expr></argument>)</argument_list></call> <operator>||</operator> \
 	<call><name>defined</name><argument_list>(<argument><expr><name>S390X</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARM64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MIPS</name></expr></argument>)</argument_list></call> <operator>||</operator> \
<operator>-</operator>	<call><name>defined</name><argument_list>(<argument><expr><name>MIPS64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator>	<call><name>defined</name><argument_list>(<argument><expr><name>MIPS64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SPARC64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>RISCV64</name></expr></argument>)</argument_list></call>
 
 <comment type="block">/*
  * Kernel header file for Linux crash dumps.
@@ -84,13 +84,9 @@ typedef struct _dump_header_asm_s {
 	uint32_t             dha_eip;
 
 	/* the dump registers */</comment>
<operator>-</operator><operator>#</operator><name>ifndef</name> <name>S390</name>
<operator>-</operator><operator>#</operator><name>ifndef</name> <name>S390X</name>
<operator>-</operator><operator>#</operator><name>ifndef</name> <name>ARM64</name>
<operator>+</operator><operator>#</operator></expr></expr_stmt><if_stmt><if>if !defined<condition>(<expr><name>S390</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S390X</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARM64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><macro><name>defined</name><argument_list>(<argument>RISCV64</argument>)</argument_list></macro>
 	struct <name>pt_regs</name>       <name>dha_regs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>-</operator><operator>#</operator><name>endif</name>
<operator>-</operator><operator>#</operator><name>endif</name></expr></expr_stmt>
 
 }</block></struct></type> <name>dump_header_asm_t</name>;</typedef>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>netdump</name><operator>.</operator><name>c</name></name> <name>b</name><operator>/</operator><name><name>netdump</name><operator>.</operator><name>c</name></name>
<name>index</name> <name>ff273b4</name><operator>..</operator><literal type="number">4ec12a0</literal> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>netdump</name><operator>.</operator><name>c</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>netdump</name><operator>.</operator><name>c</name></name>
@@ <operator>-</operator><literal type="number">300</literal><operator>,</operator><literal type="number">6</literal> <operator>+</operator><literal type="number">300</literal><operator>,</operator><literal type="number">12</literal> @@ <macro><name>is_netdump</name><argument_list>(<argument>char *file</argument>, <argument>ulong source_query</argument>)</argument_list></macro></block></expr></expr_stmt></block_content></block></if></if_stmt>
 				<goto>goto <name>bailout</name>;</goto>
 			<break>break;</break>
 
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<case>case <expr><name>EM_RISCV</name></expr>:</case>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<if_stmt><if>if <condition>(<expr><call><name>machine_type_mismatch</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"RISCV64"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>+</operator>			    <name>source_query</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>				<goto>goto <name>bailout</name>;</goto>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<break>break;</break>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>
 		<default>default:</default>
 			<if_stmt><if>if <condition>(<expr><call><name>machine_type_mismatch</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"(unknown)"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
 			    <argument><expr><name>source_query</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
@@ <expr_stmt><expr><operator>-</operator><literal type="number">2935</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">2941</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <macro><name>dump_registers_for_elf_dumpfiles</name><argument_list>(<argument>void</argument>)</argument_list></macro></expr></expr_stmt></block_content></block></if></if_stmt>
 
         <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"X86"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"X86_64"</literal></expr></argument>)</argument_list></call> <operator>||</operator> 
 	    <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"ARM64"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"PPC64"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>-</operator>	    <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"MIPS"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"MIPS64"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>	    <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"MIPS"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"MIPS64"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>+</operator>	    <call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"RISCV64"</literal></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>))
                 <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"-r option not supported for this dumpfile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
 	<if_stmt><if>if <condition>(<expr><call><name>NETDUMP_DUMPFILE</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>ramdump</name><operator>.</operator><name>c</name></name> <name>b</name><operator>/</operator><name><name>ramdump</name><operator>.</operator><name>c</name></name>
<name>index</name> <name>a206fcb</name><operator>..</operator><name>d2bd7ff</name> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>ramdump</name><operator>.</operator><name>c</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>ramdump</name><operator>.</operator><name>c</name></name>
@@ <operator>-</operator><literal type="number">188</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">188</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>char</name> <operator>*</operator><macro><name>ramdump_to_elf</name><argument_list>(<argument>void</argument>)</argument_list></macro>
 		<name>e_machine</name> <operator>=</operator> <name>EM_MIPS</name></expr>;</expr_stmt>
 	<if_stmt><if type="elseif">else if <condition>(<expr><call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"X86_64"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
 		<expr_stmt><expr><name>e_machine</name> <operator>=</operator> <name>EM_X86_64</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if type="elseif">else if <condition>(<expr><call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"RISCV64"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<name>e_machine</name> <operator>=</operator> <name>EM_RISCV</name></expr>;</expr_stmt></block_content></block></if>
 	<else>else<block type="pseudo"><block_content>
 		<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"ramdump: unsupported machine type: %s\n"</literal></expr></argument>, 
 			<argument><expr><name>MACHINE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>riscv64</name><operator>.</operator><name>c</name></name> <name>b</name><operator>/</operator><name><name>riscv64</name><operator>.</operator><name>c</name></name>
<name>new</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000..4f858a4</literal>
<operator>--</operator><operator>-</operator> <operator>/</operator><name>dev</name><operator>/</operator><name>null</name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>riscv64</name><operator>.</operator><name>c</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">54</literal> @@
<operator>+</operator><comment type="block">/* riscv64.c - core analysis suite
+ *
+ * Copyright (C) 2022 Alibaba Group Holding Limited.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */</comment>
<operator>+</operator><operator>#</operator><name>include</name> <literal type="string">"defs.h"</literal>
<operator>+</operator><operator>#</operator><name>ifdef</name> <name>RISCV64</name>
<operator>+</operator>
<operator>+</operator><operator>#</operator><name><name>include</name> <argument_list type="generic">&lt;<argument><expr><name><name>elf</name><operator>.</operator><name>h</name></name></expr></argument>&gt;</argument_list></name>
<operator>+</operator>
<operator>+</operator><name>void</name>
<operator>+</operator><macro><name>riscv64_dump_machdep_table</name><argument_list>(<argument>ulong arg</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator></expr>}</block>
<operator>+</operator>
<operator>+</operator><comment type="block">/*
+ *  Include both vmalloc'd and module address space as VMALLOC space.
+ */</comment>
<operator>+</operator><name>int</name>
<operator>+</operator><macro><name>riscv64_IS_VMALLOC_ADDR</name><argument_list>(<argument>ulong vaddr</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator></expr>	<return>return <expr><operator>(</operator><operator>(</operator><name>vaddr</name> <operator>&gt;=</operator> <name>VMALLOC_START</name> <operator>&amp;&amp;</operator> <name>vaddr</name> <operator>&lt;=</operator> <name>VMALLOC_END</name><operator>)</operator> <operator>||</operator>
<operator>+</operator>		<operator>(</operator><name>vaddr</name> <operator>&gt;=</operator> <name>VMEMMAP_VADDR</name> <operator>&amp;&amp;</operator> <name>vaddr</name> <operator>&lt;=</operator> <name>VMEMMAP_END</name><operator>)</operator> <operator>||</operator>
<operator>+</operator>		<operator>(</operator><name>vaddr</name> <operator>&gt;=</operator> <name>MODULES_VADDR</name> <operator>&amp;&amp;</operator> <name>vaddr</name> <operator>&lt;=</operator> <name>MODULES_END</name><operator>)</operator><operator>)</operator></expr>;</return>
<operator>+</operator>}</block></expr></expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator><name>void</name>
<operator>+</operator><macro><name>riscv64_init</name><argument_list>(<argument>int when</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator></expr>}</block>
<operator>+</operator>
<operator>+</operator><name>void</name>
<operator>+</operator><macro><name>riscv64_display_regs_from_elf_notes</name><argument_list>(<argument>int cpu</argument>, <argument>FILE *ofp</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator></expr>}</block>
<operator>+</operator>
<operator>+</operator><operator>#</operator></expr></expr_stmt><if_stmt><else>else<block type="pseudo"><block_content> <comment type="block">/* !RISCV64 */</comment>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator><name>void</name>
<operator>+</operator><macro><name>riscv64_display_regs_from_elf_notes</name><argument_list>(<argument>int cpu</argument>, <argument>FILE *ofp</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator></expr>	<return>return;</return>
<operator>+</operator>}</block></expr></expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator><operator>#</operator><name>endif</name> <comment type="block">/* !RISCV64 */</comment>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>symbols</name><operator>.</operator><name>c</name></name> <name>b</name><operator>/</operator><name><name>symbols</name><operator>.</operator><name>c</name></name>
<name>index</name> <literal type="number">42c4eb4</literal><operator>..</operator><name>ebc31a2</name> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>symbols</name><operator>.</operator><name>c</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>symbols</name><operator>.</operator><name>c</name></name>
@@ <operator>-</operator><literal type="number">3743</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">3743</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <macro><name>is_kernel</name><argument_list>(<argument>char *file</argument>)</argument_list></macro></expr></expr_stmt>
 				<goto>goto <name>bailout</name>;</goto>
 			<break>break;</break>
 
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<case>case <expr><name>EM_RISCV</name></expr>:</case>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<if_stmt><if>if <condition>(<expr><call><name>machine_type_mismatch</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"RISCV64"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>				<goto>goto <name>bailout</name>;</goto>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<break>break;</break>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>
 		<default>default:</default>
 			<if_stmt><if>if <condition>(<expr><call><name>machine_type_mismatch</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"(unknown)"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
 				<goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>
@@ <expr_stmt><expr><operator>-</operator><literal type="number">4002</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">4007</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <macro><name>is_shared_object</name><argument_list>(<argument>char *file</argument>)</argument_list></macro></expr></expr_stmt>
 			<if_stmt><if>if <condition>(<expr><call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"MIPS64"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
 				<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
 			<break>break;</break>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>		<case>case <expr><name>EM_RISCV</name></expr>:</case>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<if_stmt><if>if <condition>(<expr><call><name>machine_type</name><argument_list>(<argument><expr><literal type="string">"RISCV64"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>				<return>return <expr><name>TRUE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<break>break;</break>
 		</block_content>}</block></if></if_stmt>
 
 		<if_stmt><if>if <condition>(<expr><call><name>CRASHDEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator> 
<literal type="number">2.41.0</literal>


<name>From</name> <literal type="number">3323ffc38fa913c2d58646368c5eec6e8f45bd0d</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Xianting</name> <name>Tian</name> <operator>&lt;</operator><name><name>xianting</name><operator>.</operator><name>tian</name></name>@<name><name>linux</name><operator>.</operator><name>alibaba</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">20</literal> <name>Oct</name> <literal type="number">2022</literal> <literal type="number">09</literal><operator>:</operator><literal type="number">50</literal><operator>:</operator><literal type="number">07</literal> <operator>+</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name> <literal type="number">2</literal><operator>/</operator><literal type="number">9</literal></expr>]</index> <name>RISCV64</name><operator>:</operator> <name>Make</name> <name>crash</name> <name>tool</name> <name>enter</name> <name>command</name> <name>line</name> <name>and</name> <name>support</name>
 <name>some</name> <name>commands</name>

<literal type="number">1.</literal> <name>Add</name> <macro><name>riscv64_init</name><argument_list>()</argument_list></macro> <name>implementation</name></expr><operator>,</operator></expr_stmt></block_content></block></if></if_stmt> <do>do<block type="pseudo"><block_content> <expr_stmt><expr><name>all</name> <name>necessary</name> <name>machine</name><operator>-</operator><name>specific</name> <name>setup</name></expr><operator>,</operator>
   <expr><name>which</name> <name>will</name> <name>be</name> <name>called</name> <name>multiple</name> <name>times</name> <name>during</name> <name><name>initialization</name><operator>.</operator>
<name/></name>2. <name>Add</name> <name>riscv64</name> <name>sv39</name><operator>/</operator><literal type="number">48</literal><operator>/</operator><literal type="number">57</literal> <name>pagetable</name> <name>macro</name> <name>definitions</name></expr><operator>,</operator> <expr><name>the</name> <name>function</name> <name>of</name> <name>converting</name>
   <name>virtual</name> <name>address</name> <name>to</name> <name>a</name> <name>physical</name> <name>address</name> <name>via</name> <literal type="number">4K</literal> <name>page</name> <name><name>table</name><operator>.</operator>
   <name>For</name></name> <literal type="number">2M</literal> <name>and</name> <literal type="number">1G</literal> <name>pagesize</name></expr><operator>,</operator> <expr><name>they</name> <name>will</name> <name>be</name> <name>implemented</name> <name>in</name> <name>the</name> <macro><name>future</name><argument_list>(<argument>currently not supported</argument>)</argument_list></macro><operator>.</operator>
<literal type="number">3.</literal> <name>Add</name> <name>the</name> <name>implementation</name> <name>of</name> <name>the</name> <name>vtop</name> <name>command</name></expr><operator>,</operator> <expr><name>which</name> <name>is</name> <name>used</name> <name>to</name> <name>convert</name> <name>a</name>
   <name>virtual</name> <name>address</name> <name>to</name> <name>a</name> <name>physical</name> <macro><name>address</name><argument_list>(<argument>call the functions defined in <literal type="number">2</literal></argument>)</argument_list></macro><operator>.</operator>
<literal type="number">4.</literal> <name>Add</name> <name>the</name> <name>implementation</name> <name>to</name> <name>get</name> <name>virtual</name> <name>memory</name> <name>layout</name></expr><operator>,</operator> <expr><name>va_bits</name></expr><operator>,</operator> <expr><name>phys_ram_base</name>
   <name>from</name> <name><name>vmcoreinfo</name><operator>.</operator> <name>As</name></name> <name>these</name> <name>configurations</name> <name>changes</name> <name>from</name> <name>time</name> <name>to</name> <name>time</name></expr><operator>,</operator> <expr><name>we</name> <name>sent</name>
   <name>a</name> <name>Linux</name> <name>kernel</name> <name>patch</name> <name>to</name> <name>export</name> <name>these</name> <name>configurations</name></expr><operator>,</operator> <expr><name>which</name> <name>can</name> <name>simplify</name> <name>the</name>
   <name>development</name> <name>of</name> <name>crash</name> <name><name>tool</name><operator>.</operator>
   <name>The</name></name> <name>kernel</name> <name>commit</name><operator>:</operator> <literal type="number">649d6b1019a2</literal> <operator>(</operator><literal type="string">"RISC-V: Add arch_crash_save_vmcoreinfo"</literal><operator>)</operator>
<literal type="number">5.</literal> <name>Add</name> <macro><name>riscv64_get_smp_cpus</name><argument_list>()</argument_list></macro> <name>implementation</name></expr><operator>,</operator> <expr><name>get</name> <name>the</name> <name>number</name> <name>of</name> <name><name>cpus</name><operator>.</operator>
<name/></name>6. <name>Add</name> <macro><name>riscv64_get_page_size</name><argument_list>()</argument_list></macro> <name>implementation</name></expr><operator>,</operator> <expr><name>get</name> <name>page</name> <name><name>size</name><operator>.</operator>
<name>And</name></name> <name>so</name> <name><name>on</name><operator>.</operator>

<name>With</name></name> <name>this</name> <name>patch</name></expr><operator>,</operator> <expr><name>we</name> <name>can</name> <name>enter</name> <name>crash</name> <name>command</name> <name>line</name></expr><operator>,</operator> <expr><name>and</name> <name>run</name> <literal type="string">"vtop"</literal></expr><operator>,</operator> <expr><literal type="string">"mod"</literal></expr><operator>,</operator> <expr><literal type="string">"rd"</literal></expr><operator>,</operator>
<expr><literal type="string">"*"</literal></expr><operator>,</operator> <expr><literal type="string">"p"</literal></expr><operator>,</operator> <expr><literal type="string">"kmem"</literal> <operator>...</operator>

<name>Tested</name> <name>on</name> <name>QEMU</name> <name>RISCV64</name> <name>end</name> <name>and</name> <name>SoC</name> <name>platform</name> <name>of</name> <name>T</name><operator>-</operator><name>head</name> <name>Xuantie</name> <literal type="number">910</literal> <name><name>CPU</name><operator>.</operator>

      <name>KERNEL</name></name><operator>:</operator> <name>vmlinux</name>
    <name>DUMPFILE</name><operator>:</operator> <name>vmcore</name>
        <name>CPUS</name><operator>:</operator> <literal type="number">1</literal>
        <name>DATE</name><operator>:</operator> <name>Fri</name> <name>Jul</name> <literal type="number">15</literal> <literal type="number">10</literal><operator>:</operator><literal type="number">24</literal><operator>:</operator><literal type="number">25</literal> <name>CST</name> <literal type="number">2022</literal>
      <name>UPTIME</name><operator>:</operator> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">33</literal>
<name>LOAD</name> <name>AVERAGE</name><operator>:</operator> <literal type="number">0.05</literal></expr><operator>,</operator> <expr><literal type="number">0.01</literal></expr><operator>,</operator> <expr><literal type="number">0.00</literal>
       <name>TASKS</name><operator>:</operator> <literal type="number">41</literal>
    <name>NODENAME</name><operator>:</operator> <name>buildroot</name>
     <name>RELEASE</name><operator>:</operator> <literal type="number">5.18.9</literal>
     <name>VERSION</name><operator>:</operator> <operator>#</operator><literal type="number">30</literal> <name>SMP</name> <name>Fri</name> <name>Jul</name> <literal type="number">15</literal> <literal type="number">09</literal><operator>:</operator><literal type="number">47</literal><operator>:</operator><literal type="number">03</literal> <name>CST</name> <literal type="number">2022</literal>
     <name>MACHINE</name><operator>:</operator> <macro><name>riscv64</name>  <argument_list>(<argument>unknown Mhz</argument>)</argument_list></macro>
      <name>MEMORY</name><operator>:</operator> <literal type="number">1</literal> <name>GB</name>
       <name>PANIC</name><operator>:</operator> <literal type="string">"Kernel panic - not syncing: sysrq triggered crash"</literal>
         <name>PID</name><operator>:</operator> <literal type="number">113</literal>
     <name>COMMAND</name><operator>:</operator> <literal type="string">"sh"</literal>
        <name>TASK</name><operator>:</operator> <name><name>ff60000002269600</name>  <index>[<expr><name>THREAD_INFO</name><operator>:</operator> <name>ff60000002269600</name></expr>]</index></name>
         <name>CPU</name><operator>:</operator> <literal type="number">0</literal>
       <name>STATE</name><operator>:</operator> <macro><name>TASK_RUNNING</name> <argument_list>(<argument>PANIC</argument>)</argument_list></macro>

<name>crash</name><operator>&gt;</operator> <name>p</name> <name>mem_map</name>
<name>mem_map</name> <operator>=</operator> <name>$1</name> <operator>=</operator> <operator>(</operator>struct <name>page</name> <operator>*</operator><operator>)</operator> <literal type="number">0xff6000003effbf00</literal>

<name>crash</name><operator>&gt;</operator> <name>p</name> <operator>/</operator><name>x</name> <operator>*</operator><operator>(</operator>struct <name>page</name> <operator>*</operator><operator>)</operator> <literal type="number">0xff6000003effbf00</literal>
<name>$5</name> <operator>=</operator> <block>{
  <expr><name>flags</name> <operator>=</operator> <literal type="number">0x1000</literal></expr>,
  <expr><block>{
    <expr><block>{
      <expr><block>{
        <expr><name>lru</name> <operator>=</operator> <block>{
          <expr><name>next</name> <operator>=</operator> <literal type="number">0xff6000003effbf08</literal></expr>,
          <expr><name>prev</name> <operator>=</operator> <literal type="number">0xff6000003effbf08</literal></expr>
        }</block></expr>,
        <expr><block>{
          <expr><name>__filler</name> <operator>=</operator> <literal type="number">0xff6000003effbf08</literal></expr>,
          <expr><name>mlock_count</name> <operator>=</operator> <literal type="number">0x3effbf08</literal></expr>
        }</block></expr>
      }</block></expr>,
      <expr><name>mapping</name> <operator>=</operator> <literal type="number">0x0</literal></expr>,
      <expr><name>index</name> <operator>=</operator> <literal type="number">0x0</literal></expr>,
      <expr><name>private</name> <operator>=</operator> <literal type="number">0x0</literal></expr>
    }</block></expr>,

<expr><name>crash</name><operator>&gt;</operator> <name>mod</name>
     <name>MODULE</name>       <name>NAME</name>             <name>BASE</name>         <name>SIZE</name>  <name>OBJECT</name> <name>FILE</name>
<name>ffffffff0113e740</name>  <name>nvme_core</name>  <name>ffffffff01133000</name>  <literal type="number">98304</literal>  <operator>(</operator><name>not</name> <name>loaded</name><operator>)</operator>  <index>[<expr><name>CONFIG_KALLSYMS</name></expr>]</index>
<name>ffffffff011542c0</name>  <name>nvme</name>       <name>ffffffff0114c000</name>  <literal type="number">61440</literal>  <operator>(</operator><name>not</name> <name>loaded</name><operator>)</operator>  <index>[<expr><name>CONFIG_KALLSYMS</name></expr>]</index>

<name>crash</name><operator>&gt;</operator> <name>rd</name> <name>ffffffff0113e740</name> <literal type="number">8</literal>
<name>ffffffff0113e740</name><operator>:</operator>  <literal type="number">0000000000000000</literal> <name>ffffffff810874f8</name>   <operator>...</operator><operator>...</operator><operator>...</operator><name>t</name><operator>...</operator><operator>...</operator>
<name>ffffffff0113e750</name><operator>:</operator>  <name>ffffffff011542c8</name> <literal type="number">726f635f656d766e</literal>   <operator>.</operator><name>B</name><operator>...</operator><operator>...</operator><name>nvme_cor</name>
<name>ffffffff0113e760</name><operator>:</operator>  <literal type="number">0000000000000065</literal> <literal type="number">0000000000000000</literal>   <name>e</name><operator>...</operator><operator>...</operator><operator>...</operator><operator>...</operator><operator>...</operator>
<name>ffffffff0113e770</name><operator>:</operator>  <literal type="number">0000000000000000</literal> <literal type="number">0000000000000000</literal>   <operator>...</operator><operator>...</operator><operator>...</operator><operator>...</operator><operator>...</operator><operator>.</operator>

<name>crash</name><operator>&gt;</operator> <name>vtop</name> <name>ffffffff0113e740</name>
<name>VIRTUAL</name>           <name>PHYSICAL</name>
<name>ffffffff0113e740</name>  <literal type="number">8254d740</literal>

  <name>PGD</name><operator>:</operator> <name>ffffffff810e9ff8</name> <operator>=</operator><operator>&gt;</operator> <literal type="number">2ffff001</literal>
  <name>P4D</name><operator>:</operator> <literal type="number">0000000000000000</literal> <operator>=</operator><operator>&gt;</operator> <literal type="number">000000002fffec01</literal>
  <name>PUD</name><operator>:</operator> <literal type="number">00005605c2957470</literal> <operator>=</operator><operator>&gt;</operator> <literal type="number">0000000020949801</literal>
  <name>PMD</name><operator>:</operator> <literal type="number">00007fff7f1750c0</literal> <operator>=</operator><operator>&gt;</operator> <literal type="number">0000000020947401</literal>
  <name>PTE</name><operator>:</operator> <literal type="number">0</literal> <operator>=</operator><operator>&gt;</operator> <literal type="number">209534e7</literal>
 <name>PAGE</name><operator>:</operator> <literal type="number">000000008254d000</literal>

  <name>PTE</name>     <name>PHYSICAL</name>  <name>FLAGS</name>
<literal type="number">209534e7</literal>  <literal type="number">8254d000</literal>  <operator>(</operator><name>PRESENT</name><operator>|</operator><name>READ</name><operator>|</operator><name>WRITE</name><operator>|</operator><name>GLOBAL</name><operator>|</operator><name>ACCESSED</name><operator>|</operator><name>DIRTY</name><operator>)</operator>

      <name>PAGE</name>       <name>PHYSICAL</name>      <name>MAPPING</name>       <name>INDEX</name> <name>CNT</name> <name>FLAGS</name>
<name>ff6000003f0777d8</name> <literal type="number">8254d000</literal>                <literal type="number">0</literal>        <literal type="number">0</literal>  <literal type="number">1</literal> <literal type="number">0</literal>

<name>Tested</name><operator>-</operator><name>by</name><operator>:</operator> <name>Yixun</name> <name>Lan</name> <operator>&lt;</operator><name><name>yixun</name><operator>.</operator><name>lan</name></name>@<name><name>gmail</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<name>Signed</name><operator>-</operator><name>off</name><operator>-</operator><name>by</name><operator>:</operator> <name>Xianting</name> <name>Tian</name> <operator>&lt;</operator><name><name>xianting</name><operator>.</operator><name>tian</name></name>@<name><name>linux</name><operator>.</operator><name>alibaba</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<operator>--</operator><operator>-</operator>
 <name><name>defs</name><operator>.</operator><name>h</name></name>     <operator>|</operator>  <literal type="number">97</literal> <operator>++</operator><operator>++</operator><operator>++</operator>
 <name><name>diskdump</name><operator>.</operator><name>c</name></name> <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator>
 <name><name>riscv64</name><operator>.</operator><name>c</name></name>  <operator>|</operator> <literal type="number">994</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr>, <expr><literal type="number">1101</literal> <macro><name>insertions</name><argument_list>(<argument>+</argument>)</argument_list></macro>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>defs</name><operator>.</operator><name>h</name></name> <name>b</name><operator>/</operator><name><name>defs</name><operator>.</operator><name>h</name></name>
<name>index</name> <name>d715378</name><operator>..</operator><name>b65162e</name> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>defs</name><operator>.</operator><name>h</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>defs</name><operator>.</operator><name>h</name></name>
@@ <operator>-</operator><literal type="number">3494</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">3494</literal></expr>,<expr><literal type="number">85</literal> @@ struct <name>arm64_stackframe</name> <block>{
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_64BIT_</name></cpp:macro></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MACHINE_TYPE</name></cpp:macro>		<cpp:value>"RISCV64"</cpp:value></cpp:define>
 
<expr><operator>+</operator></expr><typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>ulong</name></type> <name>pgd</name></decl>;</decl_stmt> <expr_stmt/></block></struct></type></typedef>}</block> <name>pgd_t</name></expr>;
<expr><operator>+</operator></expr><typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>ulong</name></type> <name>p4d</name></decl>;</decl_stmt> <expr_stmt/></block></struct></type></typedef>}</block> <name>p4d_t</name></expr>;
<expr><operator>+</operator></expr><typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>ulong</name></type> <name>pud</name></decl>;</decl_stmt> <expr_stmt/></block></struct></type></typedef>}</block> <name>pud_t</name></expr>;</expr_stmt></block_content></block>
+typedef struct <block>{<block_content> <decl_stmt><decl><type><name>ulong</name></type> <name>pmd</name></decl>;</decl_stmt> </block_content>}</block> pmd_t;
+typedef struct <block>{<block_content> <decl_stmt><decl><type><name>ulong</name></type> <name>pte</name></decl>;</decl_stmt> </block_content>}</block> pte_t;
+typedef signed int s32;
+
+<comment type="block">/* arch/riscv/include/asm/pgtable-64.h */</comment>
+#define PGD_SHIFT_L3		(30</do>)
<expr_stmt><expr><operator>+</operator><operator>#</operator><name>define</name> <call><name>PGD_SHIFT_L4</name>		<argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>PGD_SHIFT_L5</name>		<argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>P4D_SHIFT</name>		<argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>PUD_SHIFT</name>		<argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>PMD_SHIFT</name>		<argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>PTRS_PER_PGD</name>		<argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>PTRS_PER_P4D</name>		<argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>PTRS_PER_PUD</name>		<argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>PTRS_PER_PMD</name>		<argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>PTRS_PER_PTE</name>		<argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><comment type="block">/*
+ * Mask for bit 0~53(PROT and PPN) of PTE
+ * 63 6261  60    54  53 10  9 8 7 6 5 4 3 2 1 0
+ * N  PBMT  Reserved  P P N  RSW D A G U X W R V
+ */</comment>
<operator>+</operator><operator>#</operator><name>define</name> <name>PTE_PFN_PROT_MASK</name>	<literal type="number">0x3FFFFFFFFFFFFF</literal>
<operator>+</operator>
<operator>+</operator><comment type="block">/*
+ * 3-levels / 4K pages
+ *
+ * sv39
+ * PGD  |  PMD  |  PTE  |  OFFSET  |
+ *  9   |   9   |   9   |    12    |
+ */</comment>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>pgd_index_l3_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>PGD_SHIFT_L3</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_PGD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>pmd_index_l3_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>PMD_SHIFT</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_PMD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>pte_index_l3_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_PTE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><comment type="block">/*
+ * 4-levels / 4K pages
+ *
+ * sv48
+ * PGD  |  PUD  |  PMD  |   PTE   |  OFFSET  |
+ *  9   |   9   |   9   |    9    |    12    |
+ */</comment>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>pgd_index_l4_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>PGD_SHIFT_L4</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_PGD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>pud_index_l4_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>PUD_SHIFT</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_PUD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>pmd_index_l4_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>PMD_SHIFT</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_PMD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>pte_index_l4_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_PTE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><comment type="block">/*
+ * 5-levels / 4K pages
+ *
+ * sv57
+ * PGD  |  P4D  |  PUD  |  PMD  |   PTE   |  OFFSET  |
+ *  9   |   9   |   9   |   9   |    9    |    12    |
+ */</comment>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>pgd_index_l5_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>PGD_SHIFT_L5</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_PGD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>p4d_index_l5_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>P4D_SHIFT</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_P4D</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>pud_index_l5_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>PUD_SHIFT</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_PUD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>pmd_index_l5_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>PMD_SHIFT</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_PMD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><call><name>pte_index_l5_4k</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PTRS_PER_PTE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VM_L3_4K</name>	<argument_list>(<argument><expr><literal type="number">0x2</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VM_L3_2M</name>	<argument_list>(<argument><expr><literal type="number">0x4</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VM_L3_1G</name>	<argument_list>(<argument><expr><literal type="number">0x8</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VM_L4_4K</name>	<argument_list>(<argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VM_L4_2M</name>	<argument_list>(<argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VM_L4_1G</name>	<argument_list>(<argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VM_L5_4K</name>	<argument_list>(<argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VM_L5_2M</name>	<argument_list>(<argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VM_L5_1G</name>	<argument_list>(<argument><expr><literal type="number">0x200</literal></expr></argument>)</argument_list></call>
<operator>+</operator>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>VM_FLAGS</name>	<argument_list>(<argument><expr><name>VM_L3_4K</name> <operator>|</operator> <name>VM_L3_2M</name> <operator>|</operator> <name>VM_L3_1G</name> <operator>|</operator> \
<operator>+</operator>			 <name>VM_L4_4K</name> <operator>|</operator> <name>VM_L4_2M</name> <operator>|</operator> <name>VM_L4_1G</name> <operator>|</operator> \
<operator>+</operator>			 <name>VM_L5_4K</name> <operator>|</operator> <name>VM_L5_2M</name> <operator>|</operator> <name>VM_L5_1G</name></expr></argument>)</argument_list></call>
<operator>+</operator>
 <comment type="block">/*
  * Direct memory mapping
  */</comment>
@@ <operator>-</operator><literal type="number">3545</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">3624</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ struct <name>arm64_stackframe</name> <block>{
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHYS_MASK_SHIFT</name></cpp:macro> 	<cpp:value>_MAX_PHYSMEM_BITS</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHYS_MASK</name></cpp:macro>		<cpp:value>(((1UL) &lt;&lt; PHYS_MASK_SHIFT) - 1)</cpp:value></cpp:define>
 
<expr><operator>+</operator><operator>#</operator><name>define</name> <call><call><name>IS_LAST_P4D_READ</name><argument_list>(<argument><expr><name>p4d</name></expr></argument>)</argument_list></call>	<argument_list>(<argument><expr><operator>(</operator><name>ulong</name><operator>)</operator><operator>(</operator><name>p4d</name><operator>)</operator> <operator>==</operator> <name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>last_p4d_read</name></name></expr></argument>)</argument_list></call>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>FILL_P4D</name><argument_list>(<argument><expr><name>P4D</name></expr></argument>, <argument><expr><name>TYPE</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call>					      \
<operator>+</operator></expr>    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_LAST_P4D_READ</name><argument_list>(<argument><expr><name>P4D</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>					      \
<expr_stmt><expr><operator>+</operator>	    <call><name>readmem</name><argument_list>(<argument><expr><operator>(</operator><name>ulonglong</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ulong</name><operator>)</operator><operator>(</operator><name>P4D</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>TYPE</name></expr></argument>, <argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>p4d</name></name></expr></argument>,  \
<argument><expr><operator>+</operator>		     <name>SIZE</name></expr></argument>, <argument><expr><literal type="string">"p4d page"</literal></expr></argument>, <argument><expr><name>FAULT_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                       \
<expr_stmt><expr><operator>+</operator>	    <name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>last_p4d_read</name></name> <operator>=</operator> <operator>(</operator><name>ulong</name><operator>)</operator><operator>(</operator><name>P4D</name><operator>)</operator></expr>;</expr_stmt>                  \
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>    }</block>
<operator>+</operator>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* RISCV64 */</comment>
 
 <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X86</name></cpp:ifdef>
@@ <operator>-</operator><literal type="number">6811</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6898</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ struct <name>machine_specific</name> <block>{
 	<expr><name>ulong</name> <name>_page_soft</name></expr>;
 
 	<expr><name>ulong</name> <name>_pfn_shift</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>va_bits</name></expr>;
<expr><operator>+</operator>	<name>char</name> <operator>*</operator><name>p4d</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>last_p4d_read</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>struct_page_size</name></expr>;
 
 	struct <expr><name>riscv64_register</name> <operator>*</operator><name>crash_task_regs</name></expr>;
 }</block></expr>;</expr_stmt>
@@ <expr_stmt><expr><operator>-</operator><literal type="number">6834</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6925</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ struct <name>machine_specific</name> <block>{
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PAGE_PROT_NONE</name></cpp:macro> <cpp:value>_PAGE_READ</cpp:value></cpp:define>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PAGE_PFN_SHIFT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
 
<expr><operator>+</operator><comment type="block">/* from 'struct pt_regs' definitions of RISC-V arch */</comment>
<operator>+</operator><operator>#</operator><name>define</name> <name>RISCV64_REGS_EPC</name>  <literal type="number">0</literal>
<operator>+</operator><operator>#</operator><name>define</name> <name>RISCV64_REGS_RA</name>   <literal type="number">1</literal>
<operator>+</operator><operator>#</operator><name>define</name> <name>RISCV64_REGS_SP</name>   <literal type="number">2</literal>
<operator>+</operator><operator>#</operator><name>define</name> <name>RISCV64_REGS_FP</name>   <literal type="number">8</literal>
<operator>+</operator>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RISCV64 */</comment>
 
 <comment type="block">/*
diff --git a/diskdump.c b/diskdump.c
index 28503bc..cf5f5d9 100644
--- a/diskdump.c
+++ b/diskdump.c
@@ -1531,6 +1531,12 @@ get_diskdump_regs_mips(struct bt_info *bt, ulong *eip, ulong *esp)
 	machdep-&gt;get_stack_frame(bt, eip, esp);
 }
 
+static void
+get_diskdump_regs_riscv64(struct bt_info *bt, ulong *eip, ulong *esp)
+{
+	machdep-&gt;get_stack_frame(bt, eip, esp);
+}
+
 static void
 get_diskdump_regs_sparc64(struct bt_info *bt, ulong *eip, ulong *esp)
 {
@@ -1610,6 +1616,10 @@ get_diskdump_regs(struct bt_info *bt, ulong *eip, ulong *esp)
 		get_diskdump_regs_sparc64(bt, eip, esp);
 		break;
 
+	case EM_RISCV:
+		get_diskdump_regs_riscv64(bt, eip, esp);
+		break;
+
 	default:
 		error(FATAL, "%s: unsupported machine type: %s\n",
 			DISKDUMP_VALID() ? "diskdump" : "compressed kdump",
diff --git a/riscv64.c b/riscv64.c
index 4f858a4..d8de3d5 100644
--- a/riscv64.c
+++ b/riscv64.c
@@ -16,10 +16,314 @@
 #ifdef RISCV64
 
 #include &lt;elf.h&gt;
+#include &lt;math.h&gt;
+
+static ulong riscv64_get_page_size(void);
+static int riscv64_vtop_3level_4k(ulong *pgd, ulong vaddr,
+				   physaddr_t *paddr, int verbose);
+static int riscv64_vtop_4level_4k(ulong *pgd, ulong vaddr,
+				   physaddr_t *paddr, int verbose);
+static int riscv64_vtop_5level_4k(ulong *pgd, ulong vaddr,
+				   physaddr_t *paddr, int verbose);
+static void riscv64_page_type_init(void);
+static int riscv64_is_kvaddr(ulong vaddr);
+static int riscv64_is_uvaddr(ulong vaddr, struct task_context *tc);
+static int riscv64_uvtop(struct task_context *tc, ulong vaddr,
+			  physaddr_t *paddr, int verbose);
+static int riscv64_kvtop(struct task_context *tc, ulong kvaddr,
+			  physaddr_t *paddr, int verbose);
+static void riscv64_cmd_mach(void);
+static int riscv64_translate_pte(ulong, void *, ulonglong);
+static int riscv64_init_active_task_regs(void);
+static int riscv64_get_crash_notes(void);
+static int riscv64_get_elf_notes(void);
+static void riscv64_get_va_range(struct machine_specific *ms);
+static void riscv64_get_va_bits(struct machine_specific *ms);
+static void riscv64_get_struct_page_size(struct machine_specific *ms);
+
+#define REG_FMT 	"%016lx"
+#define SZ_2G		0x80000000
+
+/*
+ * Holds registers during the crash.
+ */</comment>
<operator>+</operator><specifier>static</specifier> struct <name>riscv64_register</name> <operator>*</operator><name>panic_task_regs</name></expr>;
<expr><operator>+</operator>
<operator>+</operator><comment type="block">/* from arch/riscv/include/asm/stacktrace.h */</comment>
<operator>+</operator>struct <name>stackframe</name> <block>{
<expr><operator>+</operator>	<name>ulong</name> <name>fp</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>ra</name></expr>;
<expr><operator>+</operator></expr>}</block></expr>;
<expr><operator>+</operator>
<operator>+</operator><specifier>static</specifier> struct <name>machine_specific</name> <name>riscv64_machine_specific</name> <operator>=</operator> <block>{
<expr><operator>+</operator>	<operator>.</operator><name>_page_present</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>,
<expr><operator>+</operator>	<operator>.</operator><name>_page_read</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>,
<expr><operator>+</operator>	<operator>.</operator><name>_page_write</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>,
<expr><operator>+</operator>	<operator>.</operator><name>_page_exec</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>,
<expr><operator>+</operator>	<operator>.</operator><name>_page_user</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>,
<expr><operator>+</operator>	<operator>.</operator><name>_page_global</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>,
<expr><operator>+</operator>	<operator>.</operator><name>_page_accessed</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>,
<expr><operator>+</operator>	<operator>.</operator><name>_page_dirty</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>,
<expr><operator>+</operator>	<operator>.</operator><name>_page_soft</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>,
<expr><operator>+</operator>
<operator>+</operator>	<operator>.</operator><name>va_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>+</operator>	<operator>.</operator><name>struct_page_size</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>+</operator></expr>}</block></expr>;
<expr><operator>+</operator>
<operator>+</operator><specifier>static</specifier> <name>void</name>
<operator>+</operator><call><name>pt_level_alloc</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><operator>*</operator><name>lvl</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>size_t</name> <name>sz</name> <operator>=</operator> <call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr>;
<expr><operator>+</operator>	<name>void</name> <operator>*</operator><name>pointer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator>
<operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pointer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<operator>+</operator>	<operator>*</operator><name>lvl</name> <operator>=</operator> <name>pointer</name></block></expr>;
<expr><operator>+</operator></expr>}</block>
<operator>+</operator>
<operator>+</operator><specifier>static</specifier> <name>ulong</name>
<operator>+</operator><call><name>riscv64_get_page_size</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator></expr>	<return>return <expr><call><name>memory_page_size</name><argument_list>()</argument_list></call></expr>;</return>
<operator>+</operator>}</block></expr></expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator><specifier>static</specifier> <name>ulong</name>
<operator>+</operator><call><name>riscv64_vmalloc_start</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator></expr>	<return>return <expr><operator>(</operator><operator>(</operator><name>ulong</name><operator>)</operator><name>VMALLOC_START</name><operator>)</operator></expr>;</return>
<operator>+</operator>}</block></expr></expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator><comment type="block">/* Get the size of struct page {} */</comment>
<operator>+</operator><specifier>static</specifier> <name>void</name> <call><name>riscv64_get_struct_page_size</name><argument_list>(<argument><expr>struct <name>machine_specific</name> <operator>*</operator><name>ms</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>char</name> <operator>*</operator><name>string</name></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"SIZE(page)"</literal></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><name>string</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<name><name>ms</name><operator>-&gt;</operator><name>struct_page_size</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr><operator>+</operator></expr></block_content></block></if></if_stmt></block>	}</expr>
<operator>+</operator></expr_stmt>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>void</name>
<operator>+</operator><call><name>riscv64_cmd_mach</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	<comment type="block">/* TODO: */</comment>
<operator>+</operator></expr>}</block>
<operator>+</operator>
<operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><macro><name>riscv64_verify_symbol</name><argument_list>(<argument>const char *name</argument>, <argument>ulong value</argument>, <argument>char type</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator>	<comment type="block">/* TODO: */</comment>
<operator>+</operator></expr>	<return>return <expr><name>TRUE</name></expr>;</return>
<operator>+</operator>}</block></expr></expr_stmt>
 
 <function><type><name>void</name></type>
 <name>riscv64_dump_machdep_table</name><parameter_list>(<parameter><decl><type><name>ulong</name></type> <name>arg</name></decl></parameter>)</parameter_list>
 <block>{<block_content>
<expr><operator>+</operator>	<comment type="block">/* TODO: */</comment>
<operator>+</operator></expr></block_content>}</block></function>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator><specifier>static</specifier> <name>ulong</name>
<operator>+</operator><call><name>riscv64_processor_speed</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	<comment type="block">/* TODO: */</comment>
<operator>+</operator></expr>	<return>return <expr><literal type="number">0</literal></expr>;</return>
<operator>+</operator>}</block></expr></expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator><specifier>static</specifier> <name>unsigned</name> <name>long</name> <call><name>riscv64_get_kernel_version</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>char</name> <operator>*</operator><name>string</name></expr>;
<expr><operator>+</operator>	<name>char</name> <name><name>buf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></expr>;
<expr><operator>+</operator>	<name>char</name> <operator>*</operator><name>p1</name></expr>, <expr><operator>*</operator><name>p2</name></expr>;
<expr><operator>+</operator>
<operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><name>THIS_KERNEL_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<return>return <expr><name>THIS_KERNEL_VERSION</name></expr>;</return>
<operator>+</operator>
<operator>+</operator>	<name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"OSRELEASE"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>string</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<name>p1</name> <operator>=</operator> <name>p2</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<while>while <condition>(<expr><operator>*</operator><name>p2</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<name>p2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>+</operator>		<operator>*</operator><name>p2</name> <operator>=</operator> <name>NULLCHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>kt</name><operator>-&gt;</operator><name>kernel_version</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<name>p1</name> <operator>=</operator> <operator>++</operator><name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<while>while <condition>(<expr><operator>*</operator><name>p2</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<name>p2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>+</operator>		<operator>*</operator><name>p2</name> <operator>=</operator> <name>NULLCHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>kt</name><operator>-&gt;</operator><name>kernel_version</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<name>p1</name> <operator>=</operator> <operator>++</operator><name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>p2</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p2</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<name>p2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>+</operator>		<operator>*</operator><name>p2</name> <operator>=</operator> <name>NULLCHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>kt</name><operator>-&gt;</operator><name>kernel_version</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<return>return <expr><name>THIS_KERNEL_VERSION</name></expr>;</return>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>void</name>
<operator>+</operator><call><name>riscv64_get_phys_ram_base</name><argument_list>(<argument><expr>struct <name>machine_specific</name> <operator>*</operator><name>ms</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>unsigned</name> <name>long</name> <name>kernel_version</name> <operator>=</operator> <call><name>riscv64_get_kernel_version</name><argument_list>()</argument_list></call></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/*
+	 * phys_ram_base is defined in Linux kernel since 5.14.
+	 */</comment>
<operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><name>kernel_version</name> <operator>&gt;=</operator> <call><name>LINUX</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<name>char</name> <operator>*</operator><name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER(phys_ram_base)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<name><name>ms</name><operator>-&gt;</operator><name>phys_base</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>			<call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>		}</block></expr></expr_stmt> <if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"cannot read phys_ram_base\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	} else
<expr_stmt><expr><operator>+</operator>		<comment type="block">/*
+		 * For qemu rv64 env and hardware platform, default phys base
+		 * may different, eg,
+		 *	hardware platform: 0x200000
+		 *	qemu   rv64   env: 0x80200000
+		 *
+		 * But we only can set one default value, in this case, qemu
+		 * rv64 env may can't work.
+		 */</comment>
<operator>+</operator>		<name><name>ms</name><operator>-&gt;</operator><name>phys_base</name></name> <operator>=</operator> <literal type="number">0x200000</literal></expr>;</expr_stmt>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>void</name> <call><name>riscv64_get_va_bits</name><argument_list>(<argument><expr>struct <name>machine_specific</name> <operator>*</operator><name>ms</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>unsigned</name> <name>long</name> <name>kernel_version</name> <operator>=</operator> <call><name>riscv64_get_kernel_version</name><argument_list>()</argument_list></call></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/*
+	 * VA_BITS is defined in Linux kernel since 5.17. So we use the
+	 * default va bits 39 when Linux version &lt; 5.17.
+	 */</comment>
<operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><name>kernel_version</name> <operator>&gt;=</operator> <call><name>LINUX</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<name>char</name> <operator>*</operator><name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER(VA_BITS)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<name><name>ms</name><operator>-&gt;</operator><name>va_bits</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>			<call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>		}</block>
<operator>+</operator></expr></expr_stmt>	} else
<expr_stmt><expr><operator>+</operator>		<name><name>ms</name><operator>-&gt;</operator><name>va_bits</name></name> <operator>=</operator> <literal type="number">39</literal></expr>;</expr_stmt>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>void</name> <call><name>riscv64_get_va_range</name><argument_list>(<argument><expr>struct <name>machine_specific</name> <operator>*</operator><name>ms</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>unsigned</name> <name>long</name> <name>kernel_version</name> <operator>=</operator> <call><name>riscv64_get_kernel_version</name><argument_list>()</argument_list></call></expr>;
<expr><operator>+</operator>	<name>char</name> <operator>*</operator><name>string</name></expr>;
<expr><operator>+</operator>
<operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER(PAGE_OFFSET)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<name><name>ms</name><operator>-&gt;</operator><name>page_offset</name></name> <operator>=</operator> <call><name>htol</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>QUIET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>	}</block></expr></expr_stmt> <if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></else></if_stmt>		<goto>goto <name>error</name>;</goto>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER(VMALLOC_START)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<name><name>ms</name><operator>-&gt;</operator><name>vmalloc_start_addr</name></name> <operator>=</operator> <call><name>htol</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>QUIET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></else></if_stmt>		<goto>goto <name>error</name>;</goto>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER(VMALLOC_END)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<name><name>ms</name><operator>-&gt;</operator><name>vmalloc_end</name></name> <operator>=</operator> <call><name>htol</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>QUIET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>                <call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></else></if_stmt>		<goto>goto <name>error</name>;</goto>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER(VMEMMAP_START)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<name><name>ms</name><operator>-&gt;</operator><name>vmemmap_vaddr</name></name> <operator>=</operator> <call><name>htol</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>QUIET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></else></if_stmt>		<goto>goto <name>error</name>;</goto>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER(VMEMMAP_END)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<name><name>ms</name><operator>-&gt;</operator><name>vmemmap_end</name></name> <operator>=</operator> <call><name>htol</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>QUIET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></else></if_stmt>		<goto>goto <name>error</name>;</goto>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER(KERNEL_LINK_ADDR)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<name><name>ms</name><operator>-&gt;</operator><name>kernel_link_addr</name></name> <operator>=</operator> <call><name>htol</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>QUIET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></else></if_stmt>		<goto>goto <name>error</name>;</goto>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/*
+	 * From Linux 5.13, the kernel mapping is moved to the last 2GB
+	 * of the address space, modules use the 2GB memory range right
+	 * before the kernel. Before Linux 5.13, modules area is embedded
+	 * in vmalloc area.
+	 *
+	 */</comment>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>kernel_version</name> <operator>&gt;=</operator> <call><name>LINUX</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER(MODULES_VADDR)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<name><name>ms</name><operator>-&gt;</operator><name>modules_vaddr</name></name> <operator>=</operator> <call><name>htol</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>QUIET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>			<call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></else></if_stmt>			<goto>goto <name>error</name>;</goto>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name><name>pc</name><operator>-&gt;</operator><name>read_vmcoreinfo</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER(MODULES_END)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<name><name>ms</name><operator>-&gt;</operator><name>modules_end</name></name> <operator>=</operator> <call><name>htol</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>QUIET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>			<call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></else></if_stmt>			<goto>goto <name>error</name>;</goto>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<name><name>ms</name><operator>-&gt;</operator><name>modules_vaddr</name></name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>vmalloc_start_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>ms</name><operator>-&gt;</operator><name>modules_end</name></name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>vmalloc_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><call><name>CRASHDEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"vmemmap	: 0x%lx - 0x%lx\n"</literal></expr></argument>,
<argument><expr><operator>+</operator>			<name><name>ms</name><operator>-&gt;</operator><name>vmemmap_vaddr</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>vmemmap_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"vmalloc	: 0x%lx - 0x%lx\n"</literal></expr></argument>,
<argument><expr><operator>+</operator>			<name><name>ms</name><operator>-&gt;</operator><name>vmalloc_start_addr</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>vmalloc_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"mudules	: 0x%lx - 0x%lx\n"</literal></expr></argument>,
<argument><expr><operator>+</operator>			<name><name>ms</name><operator>-&gt;</operator><name>modules_vaddr</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>modules_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"lowmem	: 0x%lx -\n"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>page_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"kernel link addr	: 0x%lx\n"</literal></expr></argument>,
<argument><expr><operator>+</operator>			<name><name>ms</name><operator>-&gt;</operator><name>kernel_link_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<return>return;</return>
<expr_stmt><expr><operator>+</operator><name>error</name><operator>:</operator>
<operator>+</operator>	<call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"cannot get vm layout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><macro><name>riscv64_is_kvaddr</name><argument_list>(<argument>ulong vaddr</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><call><name>IS_VMALLOC_ADDR</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<return>return <expr><name>TRUE</name></expr>;</return>
<operator>+</operator>
<operator>+</operator></block></expr></expr_stmt>	<return>return <expr><operator>(</operator><name>vaddr</name> <operator>&gt;=</operator> <name><name>machdep</name><operator>-&gt;</operator><name>kvbase</name></name><operator>)</operator></expr>;</return>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><macro><name>riscv64_is_uvaddr</name><argument_list>(<argument>ulong vaddr</argument>, <argument>struct task_context *unused</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><call><name>IS_VMALLOC_ADDR</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<return>return <expr><name>FALSE</name></expr>;</return>
<operator>+</operator>
<operator>+</operator></block></expr></expr_stmt>	<return>return <expr><operator>(</operator><name>vaddr</name> <operator>&lt;</operator> <name><name>machdep</name><operator>-&gt;</operator><name>kvbase</name></name><operator>)</operator></expr>;</return>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><macro><name>riscv64_is_task_addr</name><argument_list>(<argument>ulong task</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><name><name>tt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>THREAD_INFO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<return>return <expr><call><name>IS_KVADDR</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
<operator>+</operator>
<operator>+</operator></block></expr></expr_stmt>	<return>return <expr><operator>(</operator><call><name>IS_KVADDR</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ALIGNED_STACK_OFFSET</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><call><name>riscv64_get_smp_cpus</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator></expr>	<return>return <expr><operator>(</operator><call><name>get_cpus_present</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>?</operator> <call><name>get_cpus_present</name><argument_list>()</argument_list></call> <operator>:</operator> <name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name></expr>;</return>
 }</block></expr></expr_stmt>
 
 <comment type="block">/*
@@ -33,11 +337,701 @@ riscv64_IS_VMALLOC_ADDR(ulong vaddr)
 		(vaddr &gt;= MODULES_VADDR &amp;&amp; vaddr &lt;= MODULES_END));
 }
 
+/*
+ * Translate a PTE, returning TRUE if the page is present.
+ * If a physaddr pointer is passed in, don't print anything.
+ */</comment>
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><macro><name>riscv64_translate_pte</name><argument_list>(<argument>ulong pte</argument>, <argument>void *physaddr</argument>, <argument>ulonglong unused</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>char</name> <name><name>ptebuf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></expr>;
<expr><operator>+</operator>	<name>char</name> <name><name>physbuf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></expr>;
<expr><operator>+</operator>	<name>char</name> <name><name>buf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></expr>;
<expr><operator>+</operator>	<name>int</name> <name>page_present</name></expr>;
<expr><operator>+</operator>	<name>int</name> <name>len1</name></expr>, <expr><name>len2</name></expr>, <expr><name>others</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>paddr</name></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<name>paddr</name> <operator>=</operator> <call><name>PTOB</name><argument_list>(<argument><expr><name>pte</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator>	<name>page_present</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>pte</name> <operator>&amp;</operator> <name>_PAGE_PRESENT</name><operator>)</operator></expr>;
<expr><operator>+</operator>
<operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><name>physaddr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<operator>*</operator><operator>(</operator><name>ulong</name> <operator>*</operator><operator>)</operator><name>physaddr</name> <operator>=</operator> <name>paddr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><name>page_present</name></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>	}</block>
<operator>+</operator>
<operator>+</operator>	<call><name>sprintf</name><argument_list>(<argument><expr><name>ptebuf</name></expr></argument>, <argument><expr><literal type="string">"%lx"</literal></expr></argument>, <argument><expr><name>pte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>len1</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptebuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"PTE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s  "</literal></expr></argument>, <argument><expr><call><name>mkstring</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>CENTER</name> <operator>|</operator> <name>LJUST</name></expr></argument>, <argument><expr><literal type="string">"PTE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>page_present</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<return>return <expr><name>page_present</name></expr>;</return>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<call><name>sprintf</name><argument_list>(<argument><expr><name>physbuf</name></expr></argument>, <argument><expr><literal type="string">"%lx"</literal></expr></argument>, <argument><expr><name>paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>len2</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>physbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"PHYSICAL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s  "</literal></expr></argument>, <argument><expr><call><name>mkstring</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>CENTER</name> <operator>|</operator> <name>LJUST</name></expr></argument>, <argument><expr><literal type="string">"PHYSICAL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"FLAGS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s  %s  "</literal></expr></argument>,
<argument><expr><operator>+</operator>		<call><name>mkstring</name><argument_list>(<argument><expr><name>ptebuf</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>CENTER</name> <operator>|</operator> <name>RJUST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>+</operator>		<call><name>mkstring</name><argument_list>(<argument><expr><name>physbuf</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>CENTER</name> <operator>|</operator> <name>RJUST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>others</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator><operator>#</operator><name>define</name> <call><name>CHECK_PAGE_FLAG</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call>				\
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>_PAGE_</name><operator>#</operator><operator>#</operator><name>flag</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pte</name> <operator>&amp;</operator> <name>_PAGE_</name><operator>#</operator><operator>#</operator><name>flag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>	\
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal> <operator>#</operator><name>flag</name></expr></argument>, <argument><expr><ternary><condition><expr><name>others</name><operator>++</operator></expr> ?</condition><then> <expr><literal type="string">"|"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call>
<operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>	<if_stmt><if>if <condition>(<expr><name>pte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>CHECK_PAGE_FLAG</name><argument_list>(<argument><expr><name>PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>CHECK_PAGE_FLAG</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>CHECK_PAGE_FLAG</name><argument_list>(<argument><expr><name>WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>CHECK_PAGE_FLAG</name><argument_list>(<argument><expr><name>EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>CHECK_PAGE_FLAG</name><argument_list>(<argument><expr><name>USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>CHECK_PAGE_FLAG</name><argument_list>(<argument><expr><name>GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>CHECK_PAGE_FLAG</name><argument_list>(<argument><expr><name>ACCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>CHECK_PAGE_FLAG</name><argument_list>(<argument><expr><name>DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>CHECK_PAGE_FLAG</name><argument_list>(<argument><expr><name>SOFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"no mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<return>return <expr><name>page_present</name></expr>;</return>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>void</name>
<operator>+</operator><call><name>riscv64_page_type_init</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>ulong</name> <name>va_bits</name> <operator>=</operator> <name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>va_bits</name></name></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/*
+	 * For RISCV64 arch, any level of PTE may be a leaf PTE,
+	 * so in addition to 4KiB pages,
+	 * Sv39 supports 2 MiB megapages, 1 GiB gigapages;
+	 * Sv48 supports 2 MiB megapages, 1 GiB gigapages, 512 GiB terapages;
+	 * Sv57 supports 2 MiB megapages, 1 GiB gigapages, 512 GiB terapages, and 256 TiB petapages.
+	 *
+	 * refs to riscv-privileged spec.
+	 *
+	 * We just support 4KiB, 2MiB, 1GiB now.
+	 */</comment>
<operator>+</operator></expr>	<switch>switch <condition>(<expr><name><name>machdep</name><operator>-&gt;</operator><name>pagesize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>	<block>{
<expr><operator>+</operator></expr>	<case>case <expr><literal type="number">0x1000</literal></expr>:</case>		<comment type="line">// 4 KiB</comment>
<expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <operator>(</operator><name>va_bits</name> <operator>==</operator> <literal type="number">57</literal> <operator>?</operator> <name>VM_L5_4K</name> <operator>:</operator>
<operator>+</operator>				  <operator>(</operator><name>va_bits</name> <operator>==</operator> <literal type="number">48</literal> <operator>?</operator> <name>VM_L4_4K</name> <operator>:</operator> <name>VM_L3_4K</name><operator>)</operator><operator>)</operator></expr>;
<expr><operator>+</operator></expr>		<break>break;</break>
<operator>+</operator></block></expr></expr_stmt></block_content></block></switch>	<case>case <expr><literal type="number">0x200000</literal></expr>:</case>		<comment type="line">// 2 MiB</comment>
<expr><operator>+</operator>		<comment type="block">/* TODO: */</comment>
<operator>+</operator></expr>	<case>case <expr><literal type="number">0x40000000</literal></expr>:</case> 	<comment type="line">// 1 GiB</comment>
<expr><operator>+</operator>		<comment type="block">/* TODO: */</comment>
<operator>+</operator></expr>	<default>default:</default>
<expr><operator>+</operator></expr>		<if_stmt><if>if <condition>(<expr><name><name>machdep</name><operator>-&gt;</operator><name>pagesize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"invalid/unsupported page size: %d\n"</literal></expr></argument>,
<argument><expr><operator>+</operator>			      <name><name>machdep</name><operator>-&gt;</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<operator>+</operator></block></expr></expr_stmt>		<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"cannot determine page size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	}
+}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><macro><name>riscv64_vtop_3level_4k</name><argument_list>(<argument>ulong *pgd</argument>, <argument>ulong vaddr</argument>, <argument>physaddr_t *paddr</argument>, <argument>int verbose</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>ulong</name> <operator>*</operator><name>pgd_ptr</name></expr>, <expr><name>pgd_val</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pmd_val</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pte_val</name></expr>, <expr><name>pte_pfn</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pt_phys</name></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* PGD */</comment>
<operator>+</operator>	<name>pgd_ptr</name> <operator>=</operator> <name>pgd</name> <operator>+</operator> <call><name>pgd_index_l3_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator>	<call><name>FILL_PGD</name><argument_list>(<argument><expr><name>pgd</name></expr></argument>, <argument><expr><name>KVADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator>	<name>pgd_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>pgd</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><name>pgd_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  PGD: %lx =&gt; %lx\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong</name><operator>)</operator><name>pgd_ptr</name></expr></argument>, <argument><expr><name>pgd_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<operator>+</operator></block></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgd_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>pgd_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pt_phys</name> <operator>=</operator> <operator>(</operator><name>pgd_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name><operator>)</operator> <operator>&lt;&lt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* PMD */</comment>
<operator>+</operator>	<call><name>FILL_PMD</name><argument_list>(<argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><name>pt_phys</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PHYSADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pmd_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>pmd</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pmd_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>+</operator>			<call><name>pmd_index_l3_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  PMD: %016lx =&gt; %016lx\n"</literal></expr></argument>, <argument><expr><name>pt_phys</name></expr></argument>, <argument><expr><name>pmd_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pmd_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>pmd_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pt_phys</name> <operator>=</operator> <operator>(</operator><name>pmd_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name><operator>)</operator> <operator>&lt;&lt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* PTE */</comment>
<operator>+</operator>	<call><name>FILL_PTBL</name><argument_list>(<argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><name>pt_phys</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PHYSADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pte_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>ptbl</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pte_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>+</operator>			<call><name>pte_index_l3_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  PTE: %lx =&gt; %lx\n"</literal></expr></argument>, <argument><expr><name>pt_phys</name></expr></argument>, <argument><expr><name>pte_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pte_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>pte_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pte_pfn</name> <operator>=</operator> <name>pte_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pte_val</name> <operator>&amp;</operator> <name>_PAGE_PRESENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>			<call><name>riscv64_translate_pte</name><argument_list>(<argument><expr><operator>(</operator><name>ulong</name><operator>)</operator><name>pte_val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" PAGE: %016lx not present\n\n"</literal></expr></argument>, <argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><operator>*</operator><name>paddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><name>FALSE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<operator>*</operator><name>paddr</name> <operator>=</operator> <call><name>PTOB</name><argument_list>(<argument><expr><name>pte_pfn</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" PAGE: %016lx\n\n"</literal></expr></argument>, <argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><operator>*</operator><name>paddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>riscv64_translate_pte</name><argument_list>(<argument><expr><name>pte_val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<return>return <expr><name>TRUE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator><name>no_page</name><operator>:</operator>
<operator>+</operator>	<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<return>return <expr><name>FALSE</name></expr>;</return>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><macro><name>riscv64_vtop_4level_4k</name><argument_list>(<argument>ulong *pgd</argument>, <argument>ulong vaddr</argument>, <argument>physaddr_t *paddr</argument>, <argument>int verbose</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>ulong</name> <operator>*</operator><name>pgd_ptr</name></expr>, <expr><name>pgd_val</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pud_val</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pmd_val</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pte_val</name></expr>, <expr><name>pte_pfn</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pt_phys</name></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* PGD */</comment>
<operator>+</operator>	<name>pgd_ptr</name> <operator>=</operator> <name>pgd</name> <operator>+</operator> <call><name>pgd_index_l4_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator>	<call><name>FILL_PGD</name><argument_list>(<argument><expr><name>pgd</name></expr></argument>, <argument><expr><name>KVADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator>	<name>pgd_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>pgd</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><name>pgd_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  PGD: %lx =&gt; %lx\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong</name><operator>)</operator><name>pgd_ptr</name></expr></argument>, <argument><expr><name>pgd_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<operator>+</operator></block></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgd_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>pgd_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pt_phys</name> <operator>=</operator> <operator>(</operator><name>pgd_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name><operator>)</operator> <operator>&lt;&lt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* PUD */</comment>
<operator>+</operator>	<call><name>FILL_PUD</name><argument_list>(<argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><name>pt_phys</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PHYSADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pud_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>pud</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pud_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>+</operator>			<call><name>pud_index_l4_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  PUD: %016lx =&gt; %016lx\n"</literal></expr></argument>, <argument><expr><name>pt_phys</name></expr></argument>, <argument><expr><name>pud_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pud_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>pud_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pt_phys</name> <operator>=</operator> <operator>(</operator><name>pud_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name><operator>)</operator> <operator>&lt;&lt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* PMD */</comment>
<operator>+</operator>	<call><name>FILL_PMD</name><argument_list>(<argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><name>pt_phys</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PHYSADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pmd_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>pmd</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pmd_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>+</operator>			<call><name>pmd_index_l4_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  PMD: %016lx =&gt; %016lx\n"</literal></expr></argument>, <argument><expr><name>pt_phys</name></expr></argument>, <argument><expr><name>pmd_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pmd_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>pmd_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pt_phys</name> <operator>=</operator> <operator>(</operator><name>pmd_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name><operator>)</operator> <operator>&lt;&lt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* PTE */</comment>
<operator>+</operator>	<call><name>FILL_PTBL</name><argument_list>(<argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><name>pt_phys</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PHYSADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pte_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>ptbl</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pte_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>+</operator>			<call><name>pte_index_l4_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  PTE: %lx =&gt; %lx\n"</literal></expr></argument>, <argument><expr><name>pt_phys</name></expr></argument>, <argument><expr><name>pte_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pte_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>pte_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pte_pfn</name> <operator>=</operator> <name>pte_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pte_val</name> <operator>&amp;</operator> <name>_PAGE_PRESENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>			<call><name>riscv64_translate_pte</name><argument_list>(<argument><expr><operator>(</operator><name>ulong</name><operator>)</operator><name>pte_val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" PAGE: %016lx not present\n\n"</literal></expr></argument>, <argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><operator>*</operator><name>paddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><name>FALSE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<operator>*</operator><name>paddr</name> <operator>=</operator> <call><name>PTOB</name><argument_list>(<argument><expr><name>pte_pfn</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" PAGE: %016lx\n\n"</literal></expr></argument>, <argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><operator>*</operator><name>paddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>riscv64_translate_pte</name><argument_list>(<argument><expr><name>pte_val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<return>return <expr><name>TRUE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator><name>no_page</name><operator>:</operator>
<operator>+</operator>	<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<return>return <expr><name>FALSE</name></expr>;</return>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><macro><name>riscv64_vtop_5level_4k</name><argument_list>(<argument>ulong *pgd</argument>, <argument>ulong vaddr</argument>, <argument>physaddr_t *paddr</argument>, <argument>int verbose</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>ulong</name> <operator>*</operator><name>pgd_ptr</name></expr>, <expr><name>pgd_val</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>p4d_val</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pud_val</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pmd_val</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pte_val</name></expr>, <expr><name>pte_pfn</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>pt_phys</name></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* PGD */</comment>
<operator>+</operator>	<name>pgd_ptr</name> <operator>=</operator> <name>pgd</name> <operator>+</operator> <call><name>pgd_index_l5_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator>	<call><name>FILL_PGD</name><argument_list>(<argument><expr><name>pgd</name></expr></argument>, <argument><expr><name>KVADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator>	<name>pgd_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>pgd</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><name>pgd_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  PGD: %lx =&gt; %lx\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong</name><operator>)</operator><name>pgd_ptr</name></expr></argument>, <argument><expr><name>pgd_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<operator>+</operator></block></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgd_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>pgd_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pt_phys</name> <operator>=</operator> <operator>(</operator><name>pgd_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name><operator>)</operator> <operator>&lt;&lt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* P4D */</comment>
<operator>+</operator>	<call><name>FILL_P4D</name><argument_list>(<argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><name>pt_phys</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PHYSADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>p4d_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>p4d</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p4d_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>+</operator>			<call><name>p4d_index_l5_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  P4D: %016lx =&gt; %016lx\n"</literal></expr></argument>, <argument><expr><name>pt_phys</name></expr></argument>, <argument><expr><name>p4d_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p4d_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>p4d_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pt_phys</name> <operator>=</operator> <operator>(</operator><name>p4d_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name><operator>)</operator> <operator>&lt;&lt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* PUD */</comment>
<operator>+</operator>	<call><name>FILL_PUD</name><argument_list>(<argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><name>pt_phys</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PHYSADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pud_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>pud</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pud_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>+</operator>			<call><name>pud_index_l5_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  PUD: %016lx =&gt; %016lx\n"</literal></expr></argument>, <argument><expr><name>pt_phys</name></expr></argument>, <argument><expr><name>pud_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pud_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>pud_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pt_phys</name> <operator>=</operator> <operator>(</operator><name>pud_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name><operator>)</operator> <operator>&lt;&lt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* PMD */</comment>
<operator>+</operator>	<call><name>FILL_PMD</name><argument_list>(<argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><name>pt_phys</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PHYSADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pmd_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>pmd</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pmd_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>+</operator>			<call><name>pmd_index_l4_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  PMD: %016lx =&gt; %016lx\n"</literal></expr></argument>, <argument><expr><name>pt_phys</name></expr></argument>, <argument><expr><name>pmd_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pmd_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>pmd_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pt_phys</name> <operator>=</operator> <operator>(</operator><name>pmd_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name><operator>)</operator> <operator>&lt;&lt;</operator> <call><name>PAGESHIFT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/* PTE */</comment>
<operator>+</operator>	<call><name>FILL_PTBL</name><argument_list>(<argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><name>pt_phys</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PHYSADDR</name></expr></argument>, <argument><expr><call><name>PAGESIZE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pte_val</name> <operator>=</operator> <call><name>ULONG</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>ptbl</name></name> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pte_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>+</operator>			<call><name>pte_index_l4_4k</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"  PTE: %lx =&gt; %lx\n"</literal></expr></argument>, <argument><expr><name>pt_phys</name></expr></argument>, <argument><expr><name>pte_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pte_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<goto>goto <name>no_page</name>;</goto>
<expr_stmt><expr><operator>+</operator>	<name>pte_val</name> <operator>&amp;=</operator> <name>PTE_PFN_PROT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<name>pte_pfn</name> <operator>=</operator> <name>pte_val</name> <operator>&gt;&gt;</operator> <name>_PAGE_PFN_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pte_val</name> <operator>&amp;</operator> <name>_PAGE_PRESENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>			<call><name>riscv64_translate_pte</name><argument_list>(<argument><expr><operator>(</operator><name>ulong</name><operator>)</operator><name>pte_val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!_PAGE_PRESENT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><name>FALSE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<operator>*</operator><name>paddr</name> <operator>=</operator> <call><name>PTOB</name><argument_list>(<argument><expr><name>pte_pfn</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>PAGEOFFSET</name><argument_list>(<argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" PAGE: %016lx\n\n"</literal></expr></argument>, <argument><expr><call><name>PAGEBASE</name><argument_list>(<argument><expr><operator>*</operator><name>paddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>riscv64_translate_pte</name><argument_list>(<argument><expr><name>pte_val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<return>return <expr><name>TRUE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator><name>no_page</name><operator>:</operator>
<operator>+</operator>	<call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<return>return <expr><name>FALSE</name></expr>;</return>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><call><name>riscv64_init_active_task_regs</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>int</name> <name>retval</name></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<name>retval</name> <operator>=</operator> <call><name>riscv64_get_crash_notes</name><argument_list>()</argument_list></call></expr>;
<expr><operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<return>return <expr><name>retval</name></expr>;</return>
<operator>+</operator>
<operator>+</operator></block></expr></expr_stmt>	<return>return <expr><call><name>riscv64_get_elf_notes</name><argument_list>()</argument_list></call></expr>;</return>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><comment type="block">/*
+ * Retrieve task registers for the time of the crash.
+ */</comment>
<operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><call><name>riscv64_get_crash_notes</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	struct <name>machine_specific</name> <operator>*</operator><name>ms</name> <operator>=</operator> <name><name>machdep</name><operator>-&gt;</operator><name>machspec</name></name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>crash_notes</name></expr>;
<expr><operator>+</operator>	<name>Elf64_Nhdr</name> <operator>*</operator><name>note</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>offset</name></expr>;
<expr><operator>+</operator>	<name>char</name> <operator>*</operator><name>buf</name></expr>, <expr><operator>*</operator><name>p</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <operator>*</operator><name>notes_ptrs</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <name>i</name></expr>;
<expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/*
+	 * crash_notes contains per cpu memory for storing cpu states
+	 * in case of system crash.
+	 */</comment>
<operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>symbol_exists</name><argument_list>(<argument><expr><literal type="string">"crash_notes"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<return>return <expr><name>FALSE</name></expr>;</return>
<operator>+</operator>
<operator>+</operator>	<name>crash_notes</name> <operator>=</operator> <call><name>symbol_value</name><argument_list>(<argument><expr><literal type="string">"crash_notes"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<name>notes_ptrs</name> <operator>=</operator> <operator>(</operator><name>ulong</name> <operator>*</operator><operator>)</operator><call><name>GETBUF</name><argument_list>(<argument><expr><name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>notes_ptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/*
+	 * Read crash_notes for the first CPU. crash_notes are in standard ELF
+	 * note format.
+	 */</comment>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readmem</name><argument_list>(<argument><expr><name>crash_notes</name></expr></argument>, <argument><expr><name>KVADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>notes_ptrs</name><index>[<expr><name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>+</operator>	    <sizeof>sizeof<argument_list>(<argument><expr><name><name>notes_ptrs</name><index>[<expr><name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"crash_notes"</literal></expr></argument>,
<argument><expr><operator>+</operator>		     <name>RETURN_ON_ERROR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>error</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"cannot read crash_notes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>FREEBUF</name><argument_list>(<argument><expr><name>notes_ptrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><name>FALSE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><call><name>symbol_exists</name><argument_list>(<argument><expr><literal type="string">"__per_cpu_offset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<comment type="block">/*
+		 * Add __per_cpu_offset for each cpu to form the pointer to the notes
+		 */</comment>
<operator>+</operator></expr></expr_stmt>		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<name><name>notes_ptrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>notes_ptrs</name><index>[<expr><name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>kt</name><operator>-&gt;</operator><name>__per_cpu_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<name>buf</name> <operator>=</operator> <call><name>GETBUF</name><argument_list>(<argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>note_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>panic_task_regs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>panic_task_regs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"cannot calloc panic_task_regs space\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readmem</name><argument_list>(<argument><expr><name><name>notes_ptrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>KVADDR</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>note_buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"note_buf_t"</literal></expr></argument>,
<argument><expr><operator>+</operator>			     <name>RETURN_ON_ERROR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>error</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
<argument><expr><operator>+</operator>				<literal type="string">"cannot find NT_PRSTATUS note for cpu: %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<comment type="block">/*
+		 * Do some sanity checks for this note before reading registers from it.
+		 */</comment>
<operator>+</operator>		<name>note</name> <operator>=</operator> <operator>(</operator><name>Elf64_Nhdr</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Elf64_Nhdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<comment type="block">/*
+		 * dumpfiles created with qemu won't have crash_notes, but there will
+		 * be elf notes; dumpfiles created by kdump do not create notes for
+		 * offline cpus.
+		 */</comment>
<operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><name><name>note</name><operator>-&gt;</operator><name>n_namesz</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>DISKDUMP_DUMPFILE</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>KDUMP_DUMPFILE</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<if_stmt><if>if <condition>(<expr><call><name>DISKDUMP_DUMPFILE</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>				<name>note</name> <operator>=</operator> <call><name>diskdump_get_prstatus_percpu</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<if_stmt><if type="elseif">else if <condition>(<expr><call><name>KDUMP_DUMPFILE</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>				<name>note</name> <operator>=</operator> <call><name>netdump_get_prstatus_percpu</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<if_stmt><if>if <condition>(<expr><name>note</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>				<comment type="block">/*
+				 * SIZE(note_buf) accounts for a "final note", which is a
+				 * trailing empty elf note header.
+				 */</comment>
<operator>+</operator>				<name>long</name> <name>notesz</name> <operator>=</operator> <call><name>SIZE</name><argument_list>(<argument><expr><name>note_buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Elf64_Nhdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>				<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Elf64_Nhdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>roundup</name><argument_list>(<argument><expr><name><name>note</name><operator>-&gt;</operator><name>n_namesz</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>+</operator>				    <name><name>note</name><operator>-&gt;</operator><name>n_descsz</name></name> <operator>==</operator> <name>notesz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>					<call><name>BCOPY</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>note</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>notesz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>+</operator>				<call><name>error</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
<argument><expr><operator>+</operator>					<literal type="string">"cannot find NT_PRSTATUS note for cpu: %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>				<continue>continue;</continue>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<comment type="block">/*
+		 * Check the sanity of NT_PRSTATUS note only for each online cpu.
+		 */</comment>
<operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><name><name>note</name><operator>-&gt;</operator><name>n_type</name></name> <operator>!=</operator> <name>NT_PRSTATUS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>error</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"invalid NT_PRSTATUS note (n_type != NT_PRSTATUS)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRNEQ</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CORE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>error</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"invalid NT_PRSTATUS note (name != \"CORE\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<comment type="block">/*
+		 * Find correct location of note data. This contains elf_prstatus
+		 * structure which has registers etc. for the crashed task.
+		 */</comment>
<operator>+</operator>		<name>offset</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Elf64_Nhdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name>offset</name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name><name>note</name><operator>-&gt;</operator><name>n_namesz</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt> <comment type="block">/* start of elf_prstatus */</comment>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<call><name>BCOPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <call><name>OFFSET</name><argument_list>(<argument><expr><name>elf_prstatus_pr_reg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>panic_task_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>+</operator>		      <sizeof>sizeof<argument_list>(<argument><expr><name><name>panic_task_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></for>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<comment type="block">/*
+	 * And finally we have the registers for the crashed task. This is
+	 * used later on when dumping backtrace.
+	 */</comment>
<operator>+</operator>	<name><name>ms</name><operator>-&gt;</operator><name>crash_task_regs</name></name> <operator>=</operator> <name>panic_task_regs</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<call><name>FREEBUF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<call><name>FREEBUF</name><argument_list>(<argument><expr><name>notes_ptrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<return>return <expr><name>TRUE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator><name>fail</name><operator>:</operator>
<operator>+</operator>	<call><name>FREEBUF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<call><name>FREEBUF</name><argument_list>(<argument><expr><name>notes_ptrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<call><name>free</name><argument_list>(<argument><expr><name>panic_task_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<return>return <expr><name>FALSE</name></expr>;</return>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><call><name>riscv64_get_elf_notes</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>
<operator>+</operator><block>{
<expr><operator>+</operator>	struct <name>machine_specific</name> <operator>*</operator><name>ms</name> <operator>=</operator> <name><name>machdep</name><operator>-&gt;</operator><name>machspec</name></name></expr>;
<expr><operator>+</operator>	<name>int</name> <name>i</name></expr>;
<expr><operator>+</operator>
<operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DISKDUMP_DUMPFILE</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>KDUMP_DUMPFILE</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<return>return <expr><name>FALSE</name></expr>;</return>
<operator>+</operator>
<operator>+</operator>	<name>panic_task_regs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>panic_task_regs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panic_task_regs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"cannot calloc panic_task_regs space\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<name>Elf64_Nhdr</name> <operator>*</operator><name>note</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name>size_t</name> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><call><name>DISKDUMP_DUMPFILE</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<name>note</name> <operator>=</operator> <call><name>diskdump_get_prstatus_percpu</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if type="elseif">else if <condition>(<expr><call><name>KDUMP_DUMPFILE</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<name>note</name> <operator>=</operator> <call><name>netdump_get_prstatus_percpu</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>note</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>error</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
<argument><expr><operator>+</operator>				<literal type="string">"cannot find NT_PRSTATUS note for cpu: %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>			<continue>continue;</continue>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Elf64_Nhdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name>len</name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name><name>note</name><operator>-&gt;</operator><name>n_namesz</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<call><name>BCOPY</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>note</name> <operator>+</operator> <name>len</name> <operator>+</operator> <call><name>OFFSET</name><argument_list>(<argument><expr><name>elf_prstatus_pr_reg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>+</operator>		      <operator>&amp;</operator><name><name>panic_task_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>panic_task_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></for>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<name><name>ms</name><operator>-&gt;</operator><name>crash_task_regs</name></name> <operator>=</operator> <name>panic_task_regs</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<return>return <expr><name>TRUE</name></expr>;</return>
<expr><operator>+</operator></expr>}
+
<expr_stmt><expr><operator>+</operator><comment type="block">/*
+ * Translates a user virtual address to its physical address.
+ */</comment>
<operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><macro><name>riscv64_uvtop</name><argument_list>(<argument>struct task_context *tc</argument>, <argument>ulong uvaddr</argument>, <argument>physaddr_t *paddr</argument>, <argument>int verbose</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>ulong</name> <name>mm</name></expr>, <expr><name>active_mm</name></expr>;
<expr><operator>+</operator>	<name>ulong</name> <operator>*</operator><name>pgd</name></expr>;
<expr><operator>+</operator>
<operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"current context invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<operator>+</operator>
<operator>+</operator>	<operator>*</operator><name>paddr</name> <operator>=</operator> <literal type="number">0</literal></block></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><call><name>is_kernel_thread</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>task</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IS_KVADDR</name><argument_list>(<argument><expr><name>uvaddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<call><name>readmem</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>task</name></name> <operator>+</operator> <call><name>OFFSET</name><argument_list>(<argument><expr><name>task_struct_active_mm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>+</operator>			<name>KVADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>active_mm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>+</operator>			<literal type="string">"task active_mm contents"</literal></expr></argument>, <argument><expr><name>FAULT_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active_mm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>error</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
<argument><expr><operator>+</operator>			      <literal type="string">"no active_mm for this kernel thread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<call><name>readmem</name><argument_list>(<argument><expr><name>active_mm</name> <operator>+</operator> <call><name>OFFSET</name><argument_list>(<argument><expr><name>mm_struct_pgd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>+</operator>			<name>KVADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>+</operator>			<literal type="string">"mm_struct pgd"</literal></expr></argument>, <argument><expr><name>FAULT_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mm</name> <operator>=</operator> <call><name>task_mm</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>task</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<name>pgd</name> <operator>=</operator> <call><name>ULONG_PTR</name><argument_list>(<argument><expr><name><name>tt</name><operator>-&gt;</operator><name>mm_struct</name></name> <operator>+</operator> <call><name>OFFSET</name><argument_list>(<argument><expr><name>mm_struct_pgd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>readmem</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>mm_struct</name></name> <operator>+</operator> <call><name>OFFSET</name><argument_list>(<argument><expr><name>mm_struct_pgd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>+</operator>				<name>KVADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"mm_struct pgd"</literal></expr></argument>,
<argument><expr><operator>+</operator>				<name>FAULT_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<switch>switch <condition>(<expr><name><name>machdep</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VM_FLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>	<block>{
<expr><operator>+</operator></expr>	<case>case <expr><name>VM_L3_4K</name></expr>:</case>
<expr><operator>+</operator></expr>		<return>return <expr><call><name>riscv64_vtop_3level_4k</name><argument_list>(<argument><expr><name>pgd</name></expr></argument>, <argument><expr><name>uvaddr</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</return>
<operator>+</operator></block></expr></expr_stmt></block_content></block></switch>	<case>case <expr><name>VM_L4_4K</name></expr>:</case>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><call><name>riscv64_vtop_4level_4k</name><argument_list>(<argument><expr><name>pgd</name></expr></argument>, <argument><expr><name>uvaddr</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<case>case <expr><name>VM_L5_4K</name></expr>:</case>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><call><name>riscv64_vtop_5level_4k</name><argument_list>(<argument><expr><name>pgd</name></expr></argument>, <argument><expr><name>uvaddr</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<default>default:</default>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><name>FALSE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	}
+}
+
<expr_stmt><expr><operator>+</operator><specifier>static</specifier> <name>int</name>
<operator>+</operator><macro><name>riscv64_kvtop</name><argument_list>(<argument>struct task_context *tc</argument>, <argument>ulong kvaddr</argument>, <argument>physaddr_t *paddr</argument>, <argument>int verbose</argument>)</argument_list></macro>
<operator>+</operator><block>{
<expr><operator>+</operator>	<name>ulong</name> <name>kernel_pgd</name></expr>;
<expr><operator>+</operator>
<operator>+</operator></expr>	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_KVADDR</name><argument_list>(<argument><expr><name>kvaddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>		<return>return <expr><name>FALSE</name></expr>;</return>
<operator>+</operator>
<operator>+</operator></block></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vt</name><operator>-&gt;</operator><name>vmalloc_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<operator>*</operator><name>paddr</name> <operator>=</operator> <call><name>VTOP</name><argument_list>(<argument><expr><name>kvaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><name>TRUE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VMALLOC_ADDR</name><argument_list>(<argument><expr><name>kvaddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator>		<operator>*</operator><name>paddr</name> <operator>=</operator> <call><name>VTOP</name><argument_list>(<argument><expr><name>kvaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>			<return>return <expr><name>TRUE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>	<name>kernel_pgd</name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>kernel_pgd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>	<operator>*</operator><name>paddr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<switch>switch <condition>(<expr><name><name>machdep</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VM_FLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>	<block>{
<expr><operator>+</operator></expr>	<case>case <expr><name>VM_L3_4K</name></expr>:</case>
<expr><operator>+</operator></expr>		<return>return <expr><call><name>riscv64_vtop_3level_4k</name><argument_list>(<argument><expr><operator>(</operator><name>ulong</name> <operator>*</operator><operator>)</operator><name>kernel_pgd</name></expr></argument>, <argument><expr><name>kvaddr</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</return>
<operator>+</operator></block></expr></expr_stmt></block_content></block></switch>	<case>case <expr><name>VM_L4_4K</name></expr>:</case>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><call><name>riscv64_vtop_4level_4k</name><argument_list>(<argument><expr><operator>(</operator><name>ulong</name> <operator>*</operator><operator>)</operator><name>kernel_pgd</name></expr></argument>, <argument><expr><name>kvaddr</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<case>case <expr><name>VM_L5_4K</name></expr>:</case>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><call><name>riscv64_vtop_5level_4k</name><argument_list>(<argument><expr><operator>(</operator><name>ulong</name> <operator>*</operator><operator>)</operator><name>kernel_pgd</name></expr></argument>, <argument><expr><name>kvaddr</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<default>default:</default>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<return>return <expr><name>FALSE</name></expr>;</return>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	}
+}
+
 <function><type><name>void</name></type>
 <name>riscv64_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>when</name></decl></parameter>)</parameter_list>
 <block>{<block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<switch>switch <condition>(<expr><name>when</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	<case>case <expr><name>SETUP_ENV</name></expr>:</case>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>process_elf_notes</name></name> <operator>=</operator> <name>process_elf64_notes</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<break>break;</break>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<case>case <expr><name>PRE_SYMTAB</name></expr>:</case>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>verify_symbol</name></name> <operator>=</operator> <name>riscv64_verify_symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>machspec</name></name> <operator>=</operator> <operator>&amp;</operator><name>riscv64_machine_specific</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>KERNEL_DEBUG_QUERY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt></block_content></block></if></if_stmt>			<return>return;</return>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>verify_paddr</name></name> <operator>=</operator> <name>generic_verify_paddr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>ptrs_per_pgd</name></name> <operator>=</operator> <name>PTRS_PER_PGD</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<break>break;</break>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<case>case <expr><name>PRE_GDB</name></expr>:</case>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>=</operator> <call><name>riscv64_get_page_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>pageshift</name></name> <operator>=</operator> <call><name>ffs</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>pagesize</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>pageoffset</name></name> <operator>=</operator> <name><name>machdep</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>pagemask</name></name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>ulonglong</name><operator>)</operator><name><name>machdep</name><operator>-&gt;</operator><name>pageoffset</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <name><name>machdep</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>&lt;&lt;</operator> <name>THREAD_SIZE_ORDER</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<call><name>riscv64_get_phys_ram_base</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>riscv64_get_struct_page_size</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>riscv64_get_va_bits</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>riscv64_get_va_range</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<call><name>pt_level_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>machdep</name><operator>-&gt;</operator><name>pgd</name></name></expr></argument>, <argument><expr><literal type="string">"cannot malloc pgd space."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>pt_level_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>p4d</name></name></expr></argument>, <argument><expr><literal type="string">"cannot malloc p4d space."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>pt_level_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>machdep</name><operator>-&gt;</operator><name>pud</name></name></expr></argument>, <argument><expr><literal type="string">"cannot malloc pud space."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>pt_level_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>machdep</name><operator>-&gt;</operator><name>pmd</name></name></expr></argument>, <argument><expr><literal type="string">"cannot malloc pmd space."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>pt_level_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>machdep</name><operator>-&gt;</operator><name>ptbl</name></name></expr></argument>, <argument><expr><literal type="string">"cannot malloc ptbl space."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>last_pgd_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>last_p4d_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>last_pud_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>last_pmd_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>last_ptbl_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>kvbase</name></name> <operator>=</operator> <name><name>machdep</name><operator>-&gt;</operator><name>machspec</name><operator>-&gt;</operator><name>page_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>identity_map_base</name></name> <operator>=</operator> <name><name>machdep</name><operator>-&gt;</operator><name>kvbase</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>is_kvaddr</name></name> <operator>=</operator> <name>riscv64_is_kvaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>is_uvaddr</name></name> <operator>=</operator> <name>riscv64_is_uvaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>uvtop</name></name> <operator>=</operator> <name>riscv64_uvtop</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>kvtop</name></name> <operator>=</operator> <name>riscv64_kvtop</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>cmd_mach</name></name> <operator>=</operator> <name>riscv64_cmd_mach</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>vmalloc_start</name></name> <operator>=</operator> <name>riscv64_vmalloc_start</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>processor_speed</name></name> <operator>=</operator> <name>riscv64_processor_speed</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>get_stackbase</name></name> <operator>=</operator> <name>generic_get_stackbase</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>get_stacktop</name></name> <operator>=</operator> <name>generic_get_stacktop</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>translate_pte</name></name> <operator>=</operator> <name>riscv64_translate_pte</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>memory_size</name></name> <operator>=</operator> <name>generic_memory_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>is_task_addr</name></name> <operator>=</operator> <name>riscv64_is_task_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>get_smp_cpus</name></name> <operator>=</operator> <name>riscv64_get_smp_cpus</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>value_to_symbol</name></name> <operator>=</operator> <name>generic_machdep_value_to_symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>show_interrupts</name></name> <operator>=</operator> <name>generic_show_interrupts</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>get_irq_affinity</name></name> <operator>=</operator> <name>generic_get_irq_affinity</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>init_kernel_pgd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <comment type="block">/* pgd set by symbol_value("swapper_pg_dir") */</comment>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<break>break;</break>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<case>case <expr><name>POST_GDB</name></expr>:</case>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>section_size_bits</name></name> <operator>=</operator> <name>_SECTION_SIZE_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>max_physmem_bits</name></name> <operator>=</operator> <name>_MAX_PHYSMEM_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>		<call><name>riscv64_page_type_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>machdep</name><operator>-&gt;</operator><name>hz</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<name><name>machdep</name><operator>-&gt;</operator><name>hz</name></name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><call><name>symbol_exists</name><argument_list>(<argument><expr><literal type="string">"irq_desc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>ARRAY_LENGTH_INIT</name><argument_list>(<argument><expr><name><name>machdep</name><operator>-&gt;</operator><name>nr_irqs</name></name></expr></argument>, <argument><expr><name>irq_desc</name></expr></argument>,
<argument><expr><operator>+</operator>					  <literal type="string">"irq_desc"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<if_stmt><if type="elseif">else if <condition>(<expr><call><name>kernel_symbol_exists</name><argument_list>(<argument><expr><literal type="string">"nr_irqs"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>get_symbol_data</name><argument_list>(<argument><expr><literal type="string">"nr_irqs"</literal></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>,
<argument><expr><operator>+</operator>					<operator>&amp;</operator><name><name>machdep</name><operator>-&gt;</operator><name>nr_irqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<call><name>MEMBER_OFFSET_INIT</name><argument_list>(<argument><expr><name>elf_prstatus_pr_reg</name></expr></argument>, <argument><expr><literal type="string">"elf_prstatus"</literal></expr></argument>,
<argument><expr><operator>+</operator>				   <literal type="string">"pr_reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator>		<call><name>STRUCT_SIZE_INIT</name><argument_list>(<argument><expr><name>note_buf</name></expr></argument>, <argument><expr><literal type="string">"note_buf_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<break>break;</break>
<expr_stmt><expr><operator>+</operator>
<operator>+</operator></expr></expr_stmt>	<case>case <expr><name>POST_VM</name></expr>:</case>
<expr_stmt><expr><operator>+</operator>		<comment type="block">/*
+		 * crash_notes contains machine specific information about the
+		 * crash. In particular, it contains CPU registers at the time
+		 * of the crash. We need this information to extract correct
+		 * backtraces from the panic task.
+		 */</comment>
<operator>+</operator></expr></expr_stmt>		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ACTIVE</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>riscv64_init_active_task_regs</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>+</operator>			<call><name>error</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
<argument><expr><operator>+</operator>				<literal type="string">"cannot retrieve registers for active task%s\n\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>+</operator>				<name><name>kt</name><operator>-&gt;</operator><name>cpus</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>		<break>break;</break>
<expr_stmt><expr><operator>+</operator></expr></expr_stmt>	</block_content>}</block></switch>
 </block_content>}</block></function>
 
<expr_stmt><expr><operator>+</operator><comment type="block">/*
+ * 'help -r' command output
+ */</comment>
 <name>void</name>
 <macro><name>riscv64_display_regs_from_elf_notes</name><argument_list>(<argument>int cpu</argument>, <argument>FILE *ofp</argument>)</argument_list></macro>
 <block>{
<expr><operator>--</operator> 
<literal type="number">2.41.0</literal>


<name>From</name> <name>e312ffbea0c454eda2beaf041b7b14eab4a298ec</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Xianting</name> <name>Tian</name> <operator>&lt;</operator><name><name>xianting</name><operator>.</operator><name>tian</name></name>@<name><name>linux</name><operator>.</operator><name>alibaba</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<name>Date</name><operator>:</operator> <name>Thu</name></expr>, <expr><literal type="number">20</literal> <name>Oct</name> <literal type="number">2022</literal> <literal type="number">09</literal><operator>:</operator><literal type="number">50</literal><operator>:</operator><literal type="number">08</literal> <operator>+</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name> <literal type="number">3</literal><operator>/</operator><literal type="number">9</literal></expr>]</index> <name>RISCV64</name><operator>:</operator> <name>Add</name> <literal type="char">'dis'</literal> <name>command</name> <name>support</name>

<name>Use</name> <macro><name>generic_dis_filter</name><argument_list>()</argument_list></macro> <name>function</name> <name>to</name> <name>support</name> <name>dis</name> <name>command</name> <name><name>implementation</name><operator>.</operator>

<name>With</name></name> <name>this</name> <name>patch</name></expr>, <expr><name>we</name> <name>can</name> <name>get</name> <name>the</name> <name>disassembled</name> <name>code</name></expr>,
<expr><name>crash</name><operator>&gt;</operator> <name>dis</name> <name>__crash_kexec</name>
<literal type="number">0xffffffff80088580</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>&gt;</operator><operator>:</operator>     <name>addi</name>    <name>sp</name></expr>,<expr><name>sp</name></expr>,<expr><operator>-</operator><literal type="number">352</literal>
<literal type="number">0xffffffff80088582</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">2</literal><operator>&gt;</operator><operator>:</operator>   <name>sd</name>      <name>s0</name></expr>,<expr><literal type="number">336</literal><operator>(</operator><name>sp</name><operator>)</operator>
<literal type="number">0xffffffff80088584</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">4</literal><operator>&gt;</operator><operator>:</operator>   <name>sd</name>      <name>s1</name></expr>,<expr><literal type="number">328</literal><operator>(</operator><name>sp</name><operator>)</operator>
<literal type="number">0xffffffff80088586</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">6</literal><operator>&gt;</operator><operator>:</operator>   <name>sd</name>      <name>s2</name></expr>,<expr><literal type="number">320</literal><operator>(</operator><name>sp</name><operator>)</operator>
<literal type="number">0xffffffff80088588</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">8</literal><operator>&gt;</operator><operator>:</operator>   <name>addi</name>    <name>s0</name></expr>,<expr><name>sp</name></expr>,<expr><literal type="number">352</literal>
<literal type="number">0xffffffff8008858a</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">10</literal><operator>&gt;</operator><operator>:</operator>  <name>sd</name>      <name>ra</name></expr>,<expr><literal type="number">344</literal><operator>(</operator><name>sp</name><operator>)</operator>
<literal type="number">0xffffffff8008858c</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">12</literal><operator>&gt;</operator><operator>:</operator>  <name>sd</name>      <name>s3</name></expr>,<expr><literal type="number">312</literal><operator>(</operator><name>sp</name><operator>)</operator>
<literal type="number">0xffffffff8008858e</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">14</literal><operator>&gt;</operator><operator>:</operator>  <name>sd</name>      <name>s4</name></expr>,<expr><literal type="number">304</literal><operator>(</operator><name>sp</name><operator>)</operator>
<literal type="number">0xffffffff80088590</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">16</literal><operator>&gt;</operator><operator>:</operator>  <name>auipc</name>   <name>s2</name></expr>,<expr><literal type="number">0x1057</literal>
<literal type="number">0xffffffff80088594</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">20</literal><operator>&gt;</operator><operator>:</operator>  <name>addi</name>    <name>s2</name></expr>,<expr><name>s2</name></expr>,<expr><operator>-</operator><literal type="number">1256</literal>
<literal type="number">0xffffffff80088598</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">24</literal><operator>&gt;</operator><operator>:</operator>  <name>ld</name>      <name>a5</name></expr>,<expr><literal type="number">0</literal><operator>(</operator><name>s2</name><operator>)</operator>
<literal type="number">0xffffffff8008859c</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">28</literal><operator>&gt;</operator><operator>:</operator>  <name>mv</name>      <name>s1</name></expr>,<expr><name>a0</name>
<literal type="number">0xffffffff8008859e</literal> <operator>&lt;</operator><name>__crash_kexec</name><operator>+</operator><literal type="number">30</literal><operator>&gt;</operator><operator>:</operator>  <name>auipc</name>   <name>a0</name></expr>,<expr><literal type="number">0xfff</literal>

<name>Signed</name><operator>-</operator><name>off</name><operator>-</operator><name>by</name><operator>:</operator> <name>Xianting</name> <name>Tian</name> <operator>&lt;</operator><name><name>xianting</name><operator>.</operator><name>tian</name></name>@<name><name>linux</name><operator>.</operator><name>alibaba</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<operator>--</operator><operator>-</operator>
 <name><name>riscv64</name><operator>.</operator><name>c</name></name> <operator>|</operator> <literal type="number">1</literal> <operator>+</operator>
 <literal type="number">1</literal> <name>file</name> <name>changed</name></expr>, <expr><literal type="number">1</literal> <macro><name>insertion</name><argument_list>(<argument>+</argument>)</argument_list></macro>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>riscv64</name><operator>.</operator><name>c</name></name> <name>b</name><operator>/</operator><name><name>riscv64</name><operator>.</operator><name>c</name></name>
<name>index</name> <name>d8de3d5</name><operator>..</operator><literal type="number">1e20a09</literal> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>riscv64</name><operator>.</operator><name>c</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>riscv64</name><operator>.</operator><name>c</name></name>
@@ <operator>-</operator><literal type="number">988</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">988</literal></expr>,<expr><literal type="number">7</literal> @@ <macro><name>riscv64_init</name><argument_list>(<argument>int when</argument>)</argument_list></macro>
 		<name><name>machdep</name><operator>-&gt;</operator><name>is_task_addr</name></name> <operator>=</operator> <name>riscv64_is_task_addr</name></expr>;
 		<expr><name><name>machdep</name><operator>-&gt;</operator><name>get_smp_cpus</name></name> <operator>=</operator> <name>riscv64_get_smp_cpus</name></expr>;
 		<expr><name><name>machdep</name><operator>-&gt;</operator><name>value_to_symbol</name></name> <operator>=</operator> <name>generic_machdep_value_to_symbol</name></expr>;
<expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>dis_filter</name></name> <operator>=</operator> <name>generic_dis_filter</name></expr>;
 		<expr><name><name>machdep</name><operator>-&gt;</operator><name>show_interrupts</name></name> <operator>=</operator> <name>generic_show_interrupts</name></expr>;
 		<expr><name><name>machdep</name><operator>-&gt;</operator><name>get_irq_affinity</name></name> <operator>=</operator> <name>generic_get_irq_affinity</name></expr>;
 		<expr><name><name>machdep</name><operator>-&gt;</operator><name>init_kernel_pgd</name></name> <operator>=</operator> <name>NULL</name></expr>; <comment type="block">/* pgd set by symbol_value("swapper_pg_dir") */</comment>
<expr><operator>--</operator> 
<literal type="number">2.41.0</literal>


<name>From</name> <literal type="number">5f8235703e6f086e0cb79b5596ca911cdeac893b</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Xianting</name> <name>Tian</name> <operator>&lt;</operator><name><name>xianting</name><operator>.</operator><name>tian</name></name>@<name><name>linux</name><operator>.</operator><name>alibaba</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<name>Date</name><operator>:</operator> <name>Thu</name></expr>, <expr><literal type="number">20</literal> <name>Oct</name> <literal type="number">2022</literal> <literal type="number">09</literal><operator>:</operator><literal type="number">50</literal><operator>:</operator><literal type="number">09</literal> <operator>+</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name> <literal type="number">4</literal><operator>/</operator><literal type="number">9</literal></expr>]</index> <name>RISCV64</name><operator>:</operator> <name>Add</name> <name>irq</name> <name>command</name> <name>support</name>

<name>With</name> <name>the</name> <name>patch</name></expr>, <expr><name>we</name> <name>can</name> <name>get</name> <name>the</name> <name>irq</name> <name>info</name></expr>,
<expr><name>crash</name><operator>&gt;</operator> <name>irq</name>
 <name>IRQ</name>   <name>IRQ_DESC</name><operator>/</operator><name>_DATA</name>      <name>IRQACTION</name>      <name>NAME</name>
 <literal type="number">0</literal>       <operator>(</operator><name>unused</name><operator>)</operator>          <operator>(</operator><name>unused</name><operator>)</operator>
 <literal type="number">1</literal>   <name>ff60000001329600</name>  <name>ff60000001d17180</name>  <literal type="string">"101000.rtc"</literal>
 <literal type="number">2</literal>   <name>ff60000001329800</name>  <name>ff60000001d17680</name>  <literal type="string">"ttyS0"</literal>
 <literal type="number">3</literal>   <name>ff60000001329a00</name>  <name>ff60000001c33c00</name>  <literal type="string">"virtio0"</literal>
 <literal type="number">4</literal>   <name>ff60000001329c00</name>  <name>ff60000001c33f80</name>  <literal type="string">"virtio1"</literal>
 <literal type="number">5</literal>   <name>ff6000000120f400</name>  <name>ff60000001216000</name>  <literal type="string">"riscv-timer"</literal>

<name>Signed</name><operator>-</operator><name>off</name><operator>-</operator><name>by</name><operator>:</operator> <name>Xianting</name> <name>Tian</name> <operator>&lt;</operator><name><name>xianting</name><operator>.</operator><name>tian</name></name>@<name><name>linux</name><operator>.</operator><name>alibaba</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<operator>--</operator><operator>-</operator>
 <name><name>riscv64</name><operator>.</operator><name>c</name></name> <operator>|</operator> <literal type="number">1</literal> <operator>+</operator>
 <literal type="number">1</literal> <name>file</name> <name>changed</name></expr>, <expr><literal type="number">1</literal> <macro><name>insertion</name><argument_list>(<argument>+</argument>)</argument_list></macro>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>riscv64</name><operator>.</operator><name>c</name></name> <name>b</name><operator>/</operator><name><name>riscv64</name><operator>.</operator><name>c</name></name>
<name>index</name> <literal type="number">1e20a09</literal><operator>..</operator><literal type="number">2355dac</literal> <literal type="number">100644</literal>
<operator>--</operator><operator>-</operator> <name>a</name><operator>/</operator><name><name>riscv64</name><operator>.</operator><name>c</name></name>
<operator>++</operator><operator>+</operator> <name>b</name><operator>/</operator><name><name>riscv64</name><operator>.</operator><name>c</name></name>
@@ <operator>-</operator><literal type="number">989</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">989</literal></expr>,<expr><literal type="number">7</literal> @@ <macro><name>riscv64_init</name><argument_list>(<argument>int when</argument>)</argument_list></macro>
 		<name><name>machdep</name><operator>-&gt;</operator><name>get_smp_cpus</name></name> <operator>=</operator> <name>riscv64_get_smp_cpus</name></expr>;
 		<expr><name><name>machdep</name><operator>-&gt;</operator><name>value_to_symbol</name></name> <operator>=</operator> <name>generic_machdep_value_to_symbol</name></expr>;
 		<expr><name><name>machdep</name><operator>-&gt;</operator><name>dis_filter</name></name> <operator>=</operator> <name>generic_dis_filter</name></expr>;
<expr><operator>+</operator>		<name><name>machdep</name><operator>-&gt;</operator><name>dump_irq</name></name> <operator>=</operator> <name>generic_dump_irq</name></expr>;
 		<expr><name><name>machdep</name><operator>-&gt;</operator><name>show_interrupts</name></name> <operator>=</operator> <name>generic_show_interrupts</name></expr>;
 		<expr><name><name>machdep</name><operator>-&gt;</operator><name>get_irq_affinity</name></name> <operator>=</operator> <name>generic_get_irq_affinity</name></expr>;
 		<expr><name><name>machdep</name><operator>-&gt;</operator><name>init_kernel_pgd</name></name> <operator>=</operator> <name>NULL</name></expr>; <comment type="block">/* pgd set by symbol_value("swapper_pg_dir") */</comment>
<expr><operator>--</operator> 
<literal type="number">2.41.0</literal>


<name>From</name> <name>df42b37003adef55162afddfd516f763938da8b4</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Xianting</name> <name>Tian</name> <operator>&lt;</operator><name><name>xianting</name><operator>.</operator><name>tian</name></name>@<name><name>linux</name><operator>.</operator><name>alibaba</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<name>Date</name><operator>:</operator> <name>Thu</name></expr>, <expr><literal type="number">20</literal> <name>Oct</name> <literal type="number">2022</literal> <literal type="number">09</literal><operator>:</operator><literal type="number">50</literal><operator>:</operator><literal type="number">10</literal> <operator>+</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name> <literal type="number">5</literal><operator>/</operator><literal type="number">9</literal></expr>]</index> <name>RISCV64</name><operator>:</operator> <name>Add</name> <literal type="char">'bt'</literal> <name>command</name> <name>support</name>

<literal type="number">1</literal></expr>, <expr><name>Add</name> <name>the</name> <name>implementation</name> <name>to</name> <name>get</name> <name>stack</name> <name>frame</name> <name>from</name> <name>active</name> <operator>&amp;</operator> <name>inactive</name>
   <name>task</name><literal type="char">'s stack.
2, Add '</literal><name>bt</name> <operator>-</operator><name>l</name><literal type="char">' command support get a line number associated with a
   current pc address.
3, Add '</literal><name>bt</name> <operator>-</operator><name>f</name><literal type="char">' command support to display all stack data contained
   in a frame

With the patch, we can get the backtrace,
crash&gt; bt
PID: 113      TASK: ff6000000226c200  CPU: 0    COMMAND: "sh"
 #0 [ff20000010333b90] riscv_crash_save_regs at ffffffff800078f8
 #1 [ff20000010333cf0] panic at ffffffff806578c6
 #2 [ff20000010333d50] sysrq_reset_seq_param_set at ffffffff8038c03c
 #3 [ff20000010333da0] __handle_sysrq at ffffffff8038c604
 #4 [ff20000010333e00] write_sysrq_trigger at ffffffff8038cae4
 #5 [ff20000010333e20] proc_reg_write at ffffffff801b7ee8
 #6 [ff20000010333e40] vfs_write at ffffffff80152bb2
 #7 [ff20000010333e80] ksys_write at ffffffff80152eda
 #8 [ff20000010333ed0] sys_write at ffffffff80152f52

crash&gt; bt -l
PID: 113      TASK: ff6000000226c200  CPU: 0    COMMAND: "sh"
 #0 [ff20000010333b90] riscv_crash_save_regs at ffffffff800078f8
    /buildroot/qemu_riscv64_virt_defconfig/build/linux-custom/arch/riscv/kernel/crash_save_regs.S: 47
 #1 [ff20000010333cf0] panic at ffffffff806578c6
    /buildroot/qemu_riscv64_virt_defconfig/build/linux-custom/kernel/panic.c: 276
 ... ...

crash&gt; bt -f
PID: 113      TASK: ff6000000226c200  CPU: 0    COMMAND: "sh"
 #0 [ff20000010333b90] riscv_crash_save_regs at ffffffff800078f8
    [PC: ffffffff800078f8 RA: ffffffff806578c6 SP: ff20000010333b90 SIZE: 352]
    ff20000010333b90: ff20000010333bb0 ffffffff800078f8
    ff20000010333ba0: ffffffff8008862c ff20000010333b90
    ff20000010333bb0: ffffffff810dde38 ff6000000226c200
    ff20000010333bc0: ffffffff8032be68 0720072007200720
 ... ...

Signed-off-by: Xianting Tian &lt;xianting.tian@linux.alibaba.com&gt;
---
 netdump.c |  13 +++
 riscv64.c | 283 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 296 insertions(+)

diff --git a/netdump.c b/netdump.c
index 4ec12a0..01af145 100644
--- a/netdump.c
+++ b/netdump.c
@@ -42,6 +42,7 @@ static void get_netdump_regs_ppc64(struct bt_info *, ulong *, ulong *);
 static void get_netdump_regs_arm(struct bt_info *, ulong *, ulong *);
 static void get_netdump_regs_arm64(struct bt_info *, ulong *, ulong *);
 static void get_netdump_regs_mips(struct bt_info *, ulong *, ulong *);
+static void get_netdump_regs_riscv(struct bt_info *, ulong *, ulong *);
 static void check_dumpfile_size(char *);
 static int proc_kcore_init_32(FILE *, int);
 static int proc_kcore_init_64(FILE *, int);
@@ -2675,6 +2676,10 @@ get_netdump_regs(struct bt_info *bt, ulong *eip, ulong *esp)
 		return get_netdump_regs_mips(bt, eip, esp);
 		break;
 
+	case EM_RISCV:
+		get_netdump_regs_riscv(bt, eip, esp);
+		break;
+
 	default:
 		error(FATAL, 
 		   "support for ELF machine type %d not available\n",
@@ -2931,6 +2936,8 @@ display_regs_from_elf_notes(int cpu, FILE *ofp)
 		mips_display_regs_from_elf_notes(cpu, ofp);
 	} else if (machine_type("MIPS64")) {
 		mips64_display_regs_from_elf_notes(cpu, ofp);
+	} else if (machine_type("RISCV64")) {
+		riscv64_display_regs_from_elf_notes(cpu, ofp);
 	}
 }
 
@@ -3877,6 +3884,12 @@ get_netdump_regs_mips(struct bt_info *bt, ulong *eip, ulong *esp)
 	machdep-&gt;get_stack_frame(bt, eip, esp);
 }
 
+static void
+get_netdump_regs_riscv(struct bt_info *bt, ulong *eip, ulong *esp)
+{
+	machdep-&gt;get_stack_frame(bt, eip, esp);
+}
+
 int 
 is_partial_netdump(void)
 {
diff --git a/riscv64.c b/riscv64.c
index 2355dac..4c9b35b 100644
--- a/riscv64.c
+++ b/riscv64.c
@@ -33,6 +33,17 @@ static int riscv64_uvtop(struct task_context *tc, ulong vaddr,
 static int riscv64_kvtop(struct task_context *tc, ulong kvaddr,
 			  physaddr_t *paddr, int verbose);
 static void riscv64_cmd_mach(void);
+static void riscv64_stackframe_init(void);
+static void riscv64_back_trace_cmd(struct bt_info *bt);
+static int riscv64_get_dumpfile_stack_frame(struct bt_info *bt,
+					     ulong *nip, ulong *ksp);
+static void riscv64_get_stack_frame(struct bt_info *bt, ulong *pcp,
+				     ulong *spp);
+static int riscv64_get_frame(struct bt_info *bt, ulong *pcp,
+			      ulong *spp);
+static void riscv64_display_full_frame(struct bt_info *bt,
+				        struct riscv64_unwind_frame *current,
+				        struct riscv64_unwind_frame *previous);
 static int riscv64_translate_pte(ulong, void *, ulonglong);
 static int riscv64_init_active_task_regs(void);
 static int riscv64_get_crash_notes(void);
@@ -498,6 +509,275 @@ no_page:
 	return FALSE;
 }
 
+/*
+ * '</literal><name>bt</name> <operator>-</operator><name>f</name><literal type="char">' command output
+ * Display all stack data contained in a frame
+ */
+static void
+riscv64_display_full_frame(struct bt_info *bt, struct riscv64_unwind_frame *current,
+			  struct riscv64_unwind_frame *previous)
+{
+	int i, u_idx;
+	ulong *up;
+	ulong words, addr;
+	char buf[BUFSIZE];
+
+	if (previous-&gt;sp &lt; current-&gt;sp)
+		return;
+
+	if (!(INSTACK(previous-&gt;sp, bt) &amp;&amp; INSTACK(current-&gt;sp, bt)))
+		return;
+
+	words = (previous-&gt;sp - current-&gt;sp) / sizeof(ulong) + 1;
+	addr = current-&gt;sp;
+	u_idx = (current-&gt;sp - bt-&gt;stackbase) / sizeof(ulong);
+
+	for (i = 0; i &lt; words; i++, u_idx++) {
+		if (!(i &amp; 1))
+			fprintf(fp, "%s    %lx: ", i ? "\n" : "", addr);
+
+		up = (ulong *)(&amp;bt-&gt;stackbuf[u_idx*sizeof(ulong)]);
+		fprintf(fp, "%s ", format_stack_entry(bt, buf, *up, 0));
+		addr += sizeof(ulong);
+	}
+	fprintf(fp, "\n");
+}
+
+static void
+riscv64_stackframe_init(void)
+{
+	long task_struct_thread = MEMBER_OFFSET("task_struct", "thread");
+
+	/* from arch/riscv/include/asm/processor.h */
+	long thread_reg_ra = MEMBER_OFFSET("thread_struct", "ra");
+	long thread_reg_sp = MEMBER_OFFSET("thread_struct", "sp");
+	long thread_reg_fp = MEMBER_OFFSET("thread_struct", "s");
+
+	if ((task_struct_thread == INVALID_OFFSET) ||
+	    (thread_reg_ra == INVALID_OFFSET) ||
+	    (thread_reg_sp == INVALID_OFFSET) ||
+	    (thread_reg_fp == INVALID_OFFSET) )
+		error(FATAL,
+		      "cannot determine thread_struct offsets\n");
+
+	ASSIGN_OFFSET(task_struct_thread_context_pc) =
+		task_struct_thread + thread_reg_ra;
+	ASSIGN_OFFSET(task_struct_thread_context_sp) =
+		task_struct_thread + thread_reg_sp;
+	ASSIGN_OFFSET(task_struct_thread_context_fp) =
+		task_struct_thread + thread_reg_fp;
+}
+
+static void
+riscv64_dump_backtrace_entry(struct bt_info *bt, struct syment *sym,
+			     struct riscv64_unwind_frame *current,
+			     struct riscv64_unwind_frame *previous, int level)
+{
+	const char *name = sym ? sym-&gt;name : "(invalid)";
+	struct load_module *lm;
+	char *name_plus_offset = NULL;
+	struct syment *symp;
+	ulong symbol_offset;
+	char buf[BUFSIZE];
+
+	if (bt-&gt;flags &amp; BT_SYMBOL_OFFSET) {
+		symp = value_search(current-&gt;pc, &amp;symbol_offset);
+
+		if (symp &amp;&amp; symbol_offset)
+			name_plus_offset =
+				value_to_symstr(current-&gt;pc, buf, bt-&gt;radix);
+	}
+
+	fprintf(fp, "%s#%d [%016lx] %s at %016lx",
+		level &lt; 10 ? " " : "",
+		level,
+		current-&gt;sp,
+		name_plus_offset ? name_plus_offset : name,
+		current-&gt;pc);
+
+	if (module_symbol(current-&gt;pc, NULL, &amp;lm, NULL, 0))
+		fprintf(fp, " [%s]", lm-&gt;mod_name);
+
+	fprintf(fp, "\n");
+
+	/*
+	 * '</literal><name>bt</name> <operator>-</operator><name>l</name><literal type="char">', get a line number associated with a current pc address.
+	 */
+	if (bt-&gt;flags &amp; BT_LINE_NUMBERS) {
+		get_line_number(current-&gt;pc, buf, FALSE);
+		if (strlen(buf))
+			fprintf(fp, "    %s\n", buf);
+	}
+
+	/* bt -f */
+	if (bt-&gt;flags &amp; BT_FULL) {
+		fprintf(fp, "    "
+			"[PC: %016lx RA: %016lx SP: %016lx SIZE: %ld]\n",
+			current-&gt;pc,
+			previous-&gt;pc,
+			current-&gt;sp,
+			previous-&gt;sp - current-&gt;sp);
+		riscv64_display_full_frame(bt, current, previous);
+	}
+}
+
+/*
+ * Unroll a kernel stack.
+ */
+static void
+riscv64_back_trace_cmd(struct bt_info *bt)
+{
+	struct riscv64_unwind_frame current, previous;
+	struct stackframe curr_frame;
+	int level = 0;
+
+	if (bt-&gt;flags &amp; BT_REGS_NOT_FOUND)
+		return;
+
+	current.pc = bt-&gt;instptr;
+	current.sp = bt-&gt;stkptr;
+	current.fp = bt-&gt;frameptr;
+
+	if (!INSTACK(current.sp, bt))
+		return;
+
+	for (;;) {
+		struct syment *symbol = NULL;
+		struct stackframe *frameptr;
+		ulong low, high;
+		ulong offset;
+
+		if (CRASHDEBUG(8))
+			fprintf(fp, "level %d pc %#lx sp %lx fp 0x%lx\n",
+				level, current.pc, current.sp, current.fp);
+
+		/* Validate frame pointer */
+		low = current.sp + sizeof(struct stackframe);
+		high = bt-&gt;stacktop;
+		if (current.fp &lt; low || current.fp &gt; high || current.fp &amp; 0x7) {
+			if (CRASHDEBUG(8))
+				fprintf(fp, "fp 0x%lx sp 0x%lx low 0x%lx high 0x%lx\n",
+					current.fp, current.sp, low, high);
+			return;
+		}
+
+		symbol = value_search(current.pc, &amp;offset);
+		if (!symbol)
+			return;
+
+		frameptr = (struct stackframe *)current.fp - 1;
+		if (!readmem((ulong)frameptr, KVADDR, &amp;curr_frame,
+		    sizeof(curr_frame), "get stack frame", RETURN_ON_ERROR))
+			return;
+
+		previous.pc = curr_frame.ra;
+		previous.fp = curr_frame.fp;
+		previous.sp = current.fp;
+
+		riscv64_dump_backtrace_entry(bt, symbol, &amp;current, &amp;previous, level++);
+
+		current.pc = previous.pc;
+		current.fp = previous.fp;
+		current.sp = previous.sp;
+
+		if (CRASHDEBUG(8))
+			fprintf(fp, "next %d pc %#lx sp %#lx fp %lx\n",
+				level, current.pc, current.sp, current.fp);
+	}
+}
+
+/*
+ * Get a stack frame combination of pc and ra from the most relevant spot.
+ */
+static void
+riscv64_get_stack_frame(struct bt_info *bt, ulong *pcp, ulong *spp)
+{
+	ulong ksp = 0, nip = 0;
+	int ret = 0;
+
+	if (DUMPFILE() &amp;&amp; is_task_active(bt-&gt;task))
+		ret = riscv64_get_dumpfile_stack_frame(bt, &amp;nip, &amp;ksp);
+	else
+		ret = riscv64_get_frame(bt, &amp;nip, &amp;ksp);
+
+	if (!ret)
+		error(WARNING, "cannot determine starting stack frame for task %lx\n",
+			bt-&gt;task);
+
+	if (pcp)
+		*pcp = nip;
+	if (spp)
+		*spp = ksp;
+}
+
+/*
+ * Get the starting point for the active cpu in a diskdump.
+ */
+static int
+riscv64_get_dumpfile_stack_frame(struct bt_info *bt, ulong *nip, ulong *ksp)
+{
+	const struct machine_specific *ms = machdep-&gt;machspec;
+	struct riscv64_register *regs;
+	ulong epc, sp;
+
+	if (!ms-&gt;crash_task_regs) {
+		bt-&gt;flags |= BT_REGS_NOT_FOUND;
+		return FALSE;
+	}
+
+	/*
+	 * We got registers for panic task from crash_notes. Just return them.
+	 */
+	regs = &amp;ms-&gt;crash_task_regs[bt-&gt;tc-&gt;processor];
+	epc = regs-&gt;regs[RISCV64_REGS_EPC];
+	sp = regs-&gt;regs[RISCV64_REGS_SP];
+
+	/*
+	 * Set stack frame ptr.
+	 */
+	bt-&gt;frameptr = regs-&gt;regs[RISCV64_REGS_FP];
+
+	if (nip)
+		*nip = epc;
+	if (ksp)
+		*ksp = sp;
+
+	bt-&gt;machdep = regs;
+
+	return TRUE;
+}
+
+/*
+ * Do the work for riscv64_get_stack_frame() for non-active tasks.
+ * Get SP and PC values for idle tasks.
+ */
+static int
+riscv64_get_frame(struct bt_info *bt, ulong *pcp, ulong *spp)
+{
+	if (!bt-&gt;tc || !(tt-&gt;flags &amp; THREAD_INFO))
+		return FALSE;
+
+	if (!readmem(bt-&gt;task + OFFSET(task_struct_thread_context_pc),
+		     KVADDR, pcp, sizeof(*pcp),
+		     "thread_struct.ra",
+		     RETURN_ON_ERROR))
+		return FALSE;
+
+	if (!readmem(bt-&gt;task + OFFSET(task_struct_thread_context_sp),
+		     KVADDR, spp, sizeof(*spp),
+		     "thread_struct.sp",
+		     RETURN_ON_ERROR))
+		return FALSE;
+
+	if (!readmem(bt-&gt;task + OFFSET(task_struct_thread_context_fp),
+		     KVADDR, &amp;bt-&gt;frameptr, sizeof(bt-&gt;frameptr),
+		     "thread_struct.fp",
+		     RETURN_ON_ERROR))
+		return FALSE;
+
+	return TRUE;
+}
+
 static int
 riscv64_vtop_4level_4k(ulong *pgd, ulong vaddr, physaddr_t *paddr, int verbose)
 {
@@ -978,6 +1258,8 @@ riscv64_init(int when)
 		machdep-&gt;uvtop = riscv64_uvtop;
 		machdep-&gt;kvtop = riscv64_kvtop;
 		machdep-&gt;cmd_mach = riscv64_cmd_mach;
+		machdep-&gt;get_stack_frame = riscv64_get_stack_frame;
+		machdep-&gt;back_trace = riscv64_back_trace_cmd;
 
 		machdep-&gt;vmalloc_start = riscv64_vmalloc_start;
 		machdep-&gt;processor_speed = riscv64_processor_speed;
@@ -998,6 +1280,7 @@ riscv64_init(int when)
 	case POST_GDB:
 		machdep-&gt;section_size_bits = _SECTION_SIZE_BITS;
 		machdep-&gt;max_physmem_bits = _MAX_PHYSMEM_BITS;
+		riscv64_stackframe_init();
 		riscv64_page_type_init();
 
 		if (!machdep-&gt;hz)
-- 
2.41.0


From 693715ee208f1beba459e90fbef8899799586ce1 Mon Sep 17 00:00:00 2001
From: Xianting Tian &lt;xianting.tian@linux.alibaba.com&gt;
Date: Thu, 20 Oct 2022 09:50:11 +0800
Subject: [PATCH 6/9] RISCV64: Add '</literal><name>help</name> <operator>-</operator><name>r</name><literal type="char">' command support

Add support form printing out the registers from the dump file.

With the patch, we can get the regs,
crash&gt; help -r
CPU 0:
epc : 00ffffffa5537400 ra : ffffffff80088620 sp : ff2000001039bb90
 gp : ffffffff810dde38 tp : ff60000002269600 t0 : ffffffff8032be5c
 t1 : 0720072007200720 t2 : 666666666666663c s0 : ff2000001039bcf0
 s1 : 0000000000000000 a0 : ff2000001039bb98 a1 : 0000000000000001
 a2 : 0000000000000010 a3 : 0000000000000000 a4 : 0000000000000000
 a5 : ff60000001c7d000 a6 : 000000000000003c a7 : ffffffff8035c998
 s2 : ffffffff810df0a8 s3 : ffffffff810df718 s4 : ff2000001039bb98
 s5 : 0000000000000000 s6 : 0000000000000007 s7 : ffffffff80c4a468
 s8 : 00fffffffde45410 s9 : 0000000000000007 s10: 00aaaaaad1640700
 s11: 0000000000000001 t3 : ff60000001218f00 t4 : ff60000001218f00
 t5 : ff60000001218000 t6 : ff2000001039b988

Signed-off-by: Xianting Tian &lt;xianting.tian@linux.alibaba.com&gt;
---
 riscv64.c | 38 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 38 insertions(+)

diff --git a/riscv64.c b/riscv64.c
index 4c9b35b..6d1d3b5 100644
--- a/riscv64.c
+++ b/riscv64.c
@@ -1320,6 +1320,44 @@ riscv64_init(int when)
 void
 riscv64_display_regs_from_elf_notes(int cpu, FILE *ofp)
 {
+	const struct machine_specific *ms = machdep-&gt;machspec;
+	struct riscv64_register *regs;
+
+	if (!ms-&gt;crash_task_regs) {
+		error(INFO, "registers not collected for cpu %d\n", cpu);
+		return;
+	}
+
+	regs = &amp;ms-&gt;crash_task_regs[cpu];
+	if (!regs-&gt;regs[RISCV64_REGS_SP] &amp;&amp; !regs-&gt;regs[RISCV64_REGS_EPC]) {
+		error(INFO, "registers not collected for cpu %d\n", cpu);
+		return;
+	}
+
+	/* Print riscv64 32 regs */
+	fprintf(ofp,
+		"epc : " REG_FMT " ra : " REG_FMT " sp : " REG_FMT "\n"
+		" gp : " REG_FMT " tp : " REG_FMT " t0 : " REG_FMT "\n"
+		" t1 : " REG_FMT " t2 : " REG_FMT " s0 : " REG_FMT "\n"
+		" s1 : " REG_FMT " a0 : " REG_FMT " a1 : " REG_FMT "\n"
+		" a2 : " REG_FMT " a3 : " REG_FMT " a4 : " REG_FMT "\n"
+		" a5 : " REG_FMT " a6 : " REG_FMT " a7 : " REG_FMT "\n"
+		" s2 : " REG_FMT " s3 : " REG_FMT " s4 : " REG_FMT "\n"
+		" s5 : " REG_FMT " s6 : " REG_FMT " s7 : " REG_FMT "\n"
+		" s8 : " REG_FMT " s9 : " REG_FMT " s10: " REG_FMT "\n"
+		" s11: " REG_FMT " t3 : " REG_FMT " t4 : " REG_FMT "\n"
+		" t5 : " REG_FMT " t6 : " REG_FMT "\n",
+		regs-&gt;regs[0],  regs-&gt;regs[1],  regs-&gt;regs[2],
+		regs-&gt;regs[3],  regs-&gt;regs[4],  regs-&gt;regs[5],
+		regs-&gt;regs[6],  regs-&gt;regs[7],  regs-&gt;regs[8],
+		regs-&gt;regs[9],  regs-&gt;regs[10], regs-&gt;regs[11],
+		regs-&gt;regs[12], regs-&gt;regs[13], regs-&gt;regs[14],
+		regs-&gt;regs[15], regs-&gt;regs[16], regs-&gt;regs[17],
+		regs-&gt;regs[18], regs-&gt;regs[19], regs-&gt;regs[20],
+		regs-&gt;regs[21], regs-&gt;regs[22], regs-&gt;regs[23],
+		regs-&gt;regs[24], regs-&gt;regs[25], regs-&gt;regs[26],
+		regs-&gt;regs[27], regs-&gt;regs[28], regs-&gt;regs[29],
+		regs-&gt;regs[30], regs-&gt;regs[31]);
 }
 
 #else /* !RISCV64 */
-- 
2.41.0


From 58fe88d290e77838f5fece4cae3836b21ef4f780 Mon Sep 17 00:00:00 2001
From: Xianting Tian &lt;xianting.tian@linux.alibaba.com&gt;
Date: Thu, 20 Oct 2022 09:50:12 +0800
Subject: [PATCH 7/9] RISCV64: Add '</literal><name>help</name> <operator>-</operator><name>m</name><operator>/</operator><name>M</name><literal type="char">' command support

Add riscv64_dump_machdep_table() implementation, display machdep_table.

crash&gt; help -m
              flags: 80 ()
             kvbase: ff60000000000000
  identity_map_base: ff60000000000000
           pagesize: 4096
          pageshift: 12
           pagemask: fffffffffffff000
         pageoffset: fff
        pgdir_shift: 48
       ptrs_per_pgd: 512
       ptrs_per_pte: 512
          stacksize: 16384
                 hz: 250
            memsize: 1071644672 (0x3fe00000)
               bits: 64
         back_trace: riscv64_back_trace_cmd()
    processor_speed: riscv64_processor_speed()
              uvtop: riscv64_uvtop()
              kvtop: riscv64_kvtop()
    get_stack_frame: riscv64_get_stack_frame()
      get_stackbase: generic_get_stackbase()
       get_stacktop: generic_get_stacktop()
      translate_pte: riscv64_translate_pte()
        memory_size: generic_memory_size()
      vmalloc_start: riscv64_vmalloc_start()
       is_task_addr: riscv64_is_task_addr()
      verify_symbol: riscv64_verify_symbol()
         dis_filter: generic_dis_filter()
           dump_irq: generic_dump_irq()
    show_interrupts: generic_show_interrupts()
   get_irq_affinity: generic_get_irq_affinity()
           cmd_mach: riscv64_cmd_mach()
       get_smp_cpus: riscv64_get_smp_cpus()
          is_kvaddr: riscv64_is_kvaddr()
          is_uvaddr: riscv64_is_uvaddr()
       verify_paddr: generic_verify_paddr()
    init_kernel_pgd: NULL
    value_to_symbol: generic_machdep_value_to_symbol()
  line_number_hooks: NULL
      last_pgd_read: ffffffff810e9000
      last_p4d_read: 81410000
      last_pud_read: 81411000
      last_pmd_read: 81412000
     last_ptbl_read: 81415000
                pgd: 560d586f3ab0
                p4d: 560d586f4ac0
                pud: 560d586f5ad0
                pmd: 560d586f6ae0
               ptbl: 560d586f7af0
  section_size_bits: 27
   max_physmem_bits: 56
  sections_per_root: 0
           machspec: 560d57d204a0

Signed-off-by: Xianting Tian &lt;xianting.tian@linux.alibaba.com&gt;
---
 riscv64.c | 60 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 59 insertions(+), 1 deletion(-)

diff --git a/riscv64.c b/riscv64.c
index 6d1d3b5..5e8c7d1 100644
--- a/riscv64.c
+++ b/riscv64.c
@@ -132,7 +132,65 @@ riscv64_verify_symbol(const char *name, ulong value, char type)
 void
 riscv64_dump_machdep_table(ulong arg)
 {
-	/* TODO: */
+	int others = 0;
+
+	fprintf(fp, "              flags: %lx (", machdep-&gt;flags);
+	if (machdep-&gt;flags &amp; KSYMS_START)
+		fprintf(fp, "%sKSYMS_START", others++ ? "|" : "");
+	fprintf(fp, ")\n");
+
+	fprintf(fp, "             kvbase: %lx\n", machdep-&gt;kvbase);
+	fprintf(fp, "  identity_map_base: %lx\n", machdep-&gt;identity_map_base);
+	fprintf(fp, "           pagesize: %d\n", machdep-&gt;pagesize);
+	fprintf(fp, "          pageshift: %d\n", machdep-&gt;pageshift);
+	fprintf(fp, "           pagemask: %llx\n", machdep-&gt;pagemask);
+	fprintf(fp, "         pageoffset: %lx\n", machdep-&gt;pageoffset);
+	fprintf(fp, "        pgdir_shift: %ld\n", machdep-&gt;machspec-&gt;va_bits - 9);
+	fprintf(fp, "       ptrs_per_pgd: %u\n", PTRS_PER_PGD);
+	fprintf(fp, "       ptrs_per_pte: %d\n", PTRS_PER_PTE);
+	fprintf(fp, "          stacksize: %ld\n", machdep-&gt;stacksize);
+	fprintf(fp, "                 hz: %d\n", machdep-&gt;hz);
+	fprintf(fp, "            memsize: %ld (0x%lx)\n",
+		machdep-&gt;memsize, machdep-&gt;memsize);
+	fprintf(fp, "               bits: %d\n", machdep-&gt;bits);
+	fprintf(fp, "         back_trace: riscv64_back_trace_cmd()\n");
+	fprintf(fp, "    processor_speed: riscv64_processor_speed()\n");
+	fprintf(fp, "              uvtop: riscv64_uvtop()\n");
+	fprintf(fp, "              kvtop: riscv64_kvtop()\n");
+	fprintf(fp, "    get_stack_frame: riscv64_get_stack_frame()\n");
+	fprintf(fp, "      get_stackbase: generic_get_stackbase()\n");
+	fprintf(fp, "       get_stacktop: generic_get_stacktop()\n");
+	fprintf(fp, "      translate_pte: riscv64_translate_pte()\n");
+	fprintf(fp, "        memory_size: generic_memory_size()\n");
+	fprintf(fp, "      vmalloc_start: riscv64_vmalloc_start()\n");
+	fprintf(fp, "       is_task_addr: riscv64_is_task_addr()\n");
+	fprintf(fp, "      verify_symbol: riscv64_verify_symbol()\n");
+	fprintf(fp, "         dis_filter: generic_dis_filter()\n");
+	fprintf(fp, "           dump_irq: generic_dump_irq()\n");
+	fprintf(fp, "    show_interrupts: generic_show_interrupts()\n");
+	fprintf(fp, "   get_irq_affinity: generic_get_irq_affinity()\n");
+	fprintf(fp, "           cmd_mach: riscv64_cmd_mach()\n");
+	fprintf(fp, "       get_smp_cpus: riscv64_get_smp_cpus()\n");
+	fprintf(fp, "          is_kvaddr: riscv64_is_kvaddr()\n");
+	fprintf(fp, "          is_uvaddr: riscv64_is_uvaddr()\n");
+	fprintf(fp, "       verify_paddr: generic_verify_paddr()\n");
+	fprintf(fp, "    init_kernel_pgd: NULL\n");
+	fprintf(fp, "    value_to_symbol: generic_machdep_value_to_symbol()\n");
+	fprintf(fp, "  line_number_hooks: NULL\n");
+	fprintf(fp, "      last_pgd_read: %lx\n", machdep-&gt;last_pgd_read);
+	fprintf(fp, "      last_p4d_read: %lx\n", machdep-&gt;machspec-&gt;last_p4d_read);
+	fprintf(fp, "      last_pud_read: %lx\n", machdep-&gt;last_pud_read);
+	fprintf(fp, "      last_pmd_read: %lx\n", machdep-&gt;last_pmd_read);
+	fprintf(fp, "     last_ptbl_read: %lx\n", machdep-&gt;last_ptbl_read);
+	fprintf(fp, "                pgd: %lx\n", (ulong)machdep-&gt;pgd);
+	fprintf(fp, "                p4d: %lx\n", (ulong)machdep-&gt;machspec-&gt;p4d);
+	fprintf(fp, "                pud: %lx\n", (ulong)machdep-&gt;pud);
+	fprintf(fp, "                pmd: %lx\n", (ulong)machdep-&gt;pmd);
+	fprintf(fp, "               ptbl: %lx\n", (ulong)machdep-&gt;ptbl);
+	fprintf(fp, "  section_size_bits: %ld\n", machdep-&gt;section_size_bits);
+	fprintf(fp, "   max_physmem_bits: %ld\n", machdep-&gt;max_physmem_bits);
+	fprintf(fp, "  sections_per_root: %ld\n", machdep-&gt;sections_per_root);
+	fprintf(fp, "           machspec: %lx\n", (ulong)machdep-&gt;machspec);
 }
 
 static ulong
-- 
2.41.0


From 1850c7c283f966d1552ee7026bb6fa81e1839464 Mon Sep 17 00:00:00 2001
From: Xianting Tian &lt;xianting.tian@linux.alibaba.com&gt;
Date: Thu, 20 Oct 2022 09:50:13 +0800
Subject: [PATCH 8/9] RISCV64: Add '</literal><name>mach</name><literal type="char">' command support

With the patch we can get some basic machine state information,
crash&gt; mach
                MACHINE TYPE: riscv64
                 MEMORY SIZE: 1 GB
                        CPUS: 1
             PROCESSOR SPEED: (unknown)
                          HZ: 250
                   PAGE SIZE: 4096
           KERNEL STACK SIZE: 16384

Signed-off-by: Xianting Tian &lt;xianting.tian@linux.alibaba.com&gt;
---
 riscv64.c | 45 ++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 44 insertions(+), 1 deletion(-)

diff --git a/riscv64.c b/riscv64.c
index 5e8c7d1..ff77e41 100644
--- a/riscv64.c
+++ b/riscv64.c
@@ -116,10 +116,53 @@ static void riscv64_get_struct_page_size(struct machine_specific *ms)
 	}
 }
 
+/*
+ * "mach" command output.
+ */
+static void
+riscv64_display_machine_stats(void)
+{
+	struct new_utsname *uts;
+	char buf[BUFSIZE];
+	ulong mhz;
+
+	uts = &amp;kt-&gt;utsname;
+
+	fprintf(fp, "		MACHINE TYPE: %s\n", uts-&gt;machine);
+	fprintf(fp, "		 MEMORY SIZE: %s\n", get_memory_size(buf));
+	fprintf(fp, "			CPUS: %d\n", get_cpus_to_display());
+	fprintf(fp, "	     PROCESSOR SPEED: ");
+	if ((mhz = machdep-&gt;processor_speed()))
+		fprintf(fp, "%ld Mhz\n", mhz);
+	else
+		fprintf(fp, "(unknown)\n");
+	fprintf(fp, "			  HZ: %d\n", machdep-&gt;hz);
+	fprintf(fp, "		   PAGE SIZE: %d\n", PAGESIZE());
+	fprintf(fp, "	   KERNEL STACK SIZE: %ld\n", STACKSIZE());
+}
+
 static void
 riscv64_cmd_mach(void)
 {
-	/* TODO: */
+	int c;
+
+	while ((c = getopt(argcnt, args, "cmo")) != EOF) {
+		switch (c) {
+		case '</literal><name>c</name><literal type="char">':
+		case '</literal><name>m</name><literal type="char">':
+		case '</literal><name>o</name><literal type="char">'</literal></expr></block></expr></expr_stmt>:
+			option_not_supported(c);
+			break;
+		default:
+			argerrs++;
+			break;
+		}
+	}
+
+	if (argerrs)
+		cmd_usage(pc-&gt;curcmd, SYNOPSIS);
+
+	riscv64_display_machine_stats();
 }
 
 static int
-- 
2.41.0


From 268e1a393fac05ed683068c2e5549d45032703f7 Mon Sep 17 00:00:00 2001
From: Xianting Tian &lt;xianting.tian@linux.alibaba.com&gt;
Date: Thu, 20 Oct 2022 09:50:14 +0800
Subject: [PATCH 9/9] RISCV64: Add the implementation of symbol verify

Verify the symbol to accept or reject a symbol from the kernel namelist.

Signed-off-by: Xianting Tian &lt;xianting.tian@linux.alibaba.com&gt;
---
 riscv64.c | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/riscv64.c b/riscv64.c
index ff77e41..6b9a688 100644
--- a/riscv64.c
+++ b/riscv64.c
@@ -165,10 +165,23 @@ riscv64_cmd_mach(void)
 	riscv64_display_machine_stats();
 }
 
+/*
+ * Accept or reject a symbol from the kernel namelist.
+ */
 static int
 riscv64_verify_symbol(const char *name, ulong value, char type)
 {
-	/* TODO: */
+	if (CRASHDEBUG(8) &amp;&amp; name &amp;&amp; strlen(name))
+		fprintf(fp, "%08lx %s\n", value, name);
+
+	if (!(machdep-&gt;flags &amp; KSYMS_START)) {
+		if (STREQ(name, "_text") || STREQ(name, "_stext"))
+			machdep-&gt;flags |= KSYMS_START;
+
+		return (name &amp;&amp; strlen(name) &amp;&amp; !STRNEQ(name, "__func__.") &amp;&amp;
+			!STRNEQ(name, "__crc_"));
+	}
+
 	return TRUE;
 }
 
-- 
2.41.0

</unit>
